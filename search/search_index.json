{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>thanks!!\n222\n333\n444\n555\nasda\n</code></pre> <pre><code>stateDiagram-v2\n    [*] --&gt; pending\n    pending  --&gt; success \n    pending  --&gt; failed\n    pending  --&gt; cancelled\n    failed --&gt; success\n    success --&gt; [*]\n    failed --&gt; [*]\n    cancelledx --&gt; [*]</code></pre>"},{"location":"cdi/integration/","title":"CDI Integration","text":""},{"location":"cdi/integration/#overview-of-the-qfpays-cdi-data-consent-request-flow","title":"Overview of the QFPay's CDI data consent &amp; request flow","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant dc as Data consumer\n  participant cdi as CDI\n  participant dp as Data provider\n  participant dgen as Data Generator\n\n  note left of dc: Consent request\n  dc-&gt;&gt;cdi: send a consent request with Auth Code\n  dp-&gt;&gt;cdi: poll a consent request\n  dp-&gt;&gt;cdi: approve the consent\n\n  dc-&gt;&gt;cdi: poll consent state &amp; acknowledge consent update\n\n  loop Data request\n    note left of dc: Data request\n    dc-&gt;&gt;cdi: send a data request\n\n    dp-&gt;&gt;cdi: poll the data request\n    dp-&gt;&gt;cdi: approve the data request\n    dc-&gt;&gt;cdi: poll &amp; acknowledge data request state\n\n    note left of dc: Data sharing\n\n    dp-&gt;&gt;dgen: submit a data request job\n    dgen--&gt;&gt;dp: notifition: data file(s)\n\n    dp-&gt;&gt;dc: share data file to secure store (CDI proxy / SFTP)\n    dp-&gt;&gt;cdi: share access info\n    dc-&gt;&gt;cdi: poll data access info\n    dc-&gt;&gt;dc: download data file\n  end\n</code></pre>"},{"location":"cdi/integration/#onboarding","title":"Onboarding","text":"<ul> <li>Data Consumer setup by providing Consumer</li> <li>Consider protocol for data file transfer, e.g. SFTP / HTTP</li> <li>Consider maximum file size limitation for data file transfer</li> </ul>"},{"location":"cdi/integration/#consent-request","title":"Consent Request","text":"<p>Sample payload of Consent <pre><code>{\n    \"consentId\": \"0152120c-490a-4225-90b5-f9e0c6968dc8\",\n    \"type\": \"ConsentTypeSignedDocNotRequired\",\n    \"dataConsumerId\": \"DC-SIM-001\",\n    \"dataConsumerName\": \"simulator-c\",\n    \"dataProviderId\": \"QFPAYHFL1004DP\",\n    \"dataProviderName\": \"QFPay Haojin Finte\",\n    \"scope\": {\n        \"scopeType\": \"DataScopeTypeDateRange\",\n        \"startDate\": \"2020-05-01\",\n        \"endDate\": \"2024-10-30\"\n    },\n    \"hashKey\": \"8eccd695d4a3d5ab4b23ca06f480fffbb4e0d86b291263151e01d184f9554f3d\",\n    \"status\": \"ConsentSubmitted\",\n    \"expireTime\": 1790132798,\n    \"private\": {\n        \"id\": \"dbd609d0-d6b8-417d-b970-b8d928127eb8\",\n        \"dataOwnerId\": \"1be5bb65-5e23-4e17-905b-30cd84ebafe1\",\n        \"dataOwnerName\": \"Shop One\",\n        \"consentFileList\": [],\n        \"purposePrivate\": \"please fill the auth code\",\n        \"secret\": \"5acf403de24cb97858c00f1860dbb747\",\n        \"brNo\" : \"HKG:12345678\",\n        \"dataOwnerReference\": \"1\",\n        \"createTime\": {\n            \"t\": 1673245657,\n            \"humanT\": \"2023-01-09 14:27:36\"\n        },\n        \"updateTime\": {\n            \"t\": 1673245657,\n            \"humanT\": \"2023-01-09 14:27:36\"\n        }\n    },\n    \"createTime\": {\n        \"t\": 1673245657,\n        \"humanT\": \"2023-01-09 14:27:36\"\n    },\n    \"updateTime\": {\n        \"t\": 1673245657,\n        \"humanT\": \"2023-01-09 14:27:36\"\n    }\n}\n</code></pre></p>"},{"location":"cdi/integration/#auth-code","title":"Auth Code","text":"<p>The authorization code (Auth Code) has been adapted to the data owner's authorization of data sharing consent and identification. </p> <p>Auth Code can be retrieved in QFPay merchant portal (MMS) anytime. It enables data owners to commit their consent confirmation online, to benefit from the full digital wordflow over the CDI and flexibility of Data Consent without a traditional phone call, or identification document check.</p> <p>Data Consumer can submit the Auth Code via Consent request payload as below</p> <pre><code>{\n  \"public\": {\n    ...\n  },\n  \"private\": {\n    \"dataOwnerId\": \"DO_001\",\n    \"purposePrivate\": \"JNS76EAJ\", &lt;--- Auth Code\n    \"consentFileList\": [\n      ...\n    ]\n  }\n}\n</code></pre>"},{"location":"cdi/integration/#download-a-auth-code","title":"download a Auth Code","text":"<p>Data owner should login to QFPay merchant portal (MMS) to get the Auth Code. Please below the steps to get the Auth Code.</p> <p>Steps to get Auth Code</p>"},{"location":"cdi/integration/#data-request","title":"Data request","text":"<p>sample of data request payload <pre><code>{\n    \"private\" : {\n        \"dataOwnerId\": \"1be5bb65-5e23-4e17-905b-30cd84ebafe1\",\n        \"dataOwnerName\" : \"Shop One\",\n        \"secret\" : \"de13f3c14e2cc802ecce638efdad24c4\",\n        \"brNo\" : \"HKG:10000003\",\n        \"id\" : \"57fe5232-f660-48bd-953e-9d03c84f8106\",\n        \"createTime\" : {\n            \"t\" : 1697773625,\n            \"humanT\" : \"2023-10-20 11:47:05\"\n        },\n        \"updateTime\" : {\n            \"t\" : 1697773625,\n            \"humanT\" : \"2023-10-20 11:47:05\"\n        }\n    },\n    \"purpose\" : \"2023-10-2047ac80da953a4519ac7e7003aeb0fb47\",\n    \"dataScope\" : {\n        \"scopeType\" : \"DataScopeTypeDateRange\",\n        \"startDate\" : \"2023-04-23\",\n        \"endDate\" : \"2023-10-19\"\n    },\n    \"consentId\" : \"1ec3e40c-8706-4b23-843e-35d5f7be5782\",\n  ...\n}  \n</code></pre></p>"},{"location":"cdi/integration/#data-access-info","title":"Data access info","text":""},{"location":"cdi/integration/#using-sftp","title":"using SFTP","text":""},{"location":"cdi/integration/#prerequisite","title":"prerequisite","text":"<ul> <li>a SSH public key has been add to SFTP server</li> <li>a SFTP user has been created</li> </ul>"},{"location":"cdi/integration/#access-info-example","title":"access info example","text":"<pre><code>{\n  \"channel\": \"SFTP\",\n  \"endPoint\": \"${SFTP_HOSTNAME}:${SFTP_PORT}\",\n  \"accessToken\": \"SFTP_PRIVATE_KEY_NAME\",\n  \"fileType\": \"csv\",\n  \"filePath\": \"${uploadAbsoluteRemotePath}/${consumerId}/upload/TXN-V02-1130000459-20220401-20230309-1678327514554.csv\",\n  \"fileHash\": \"$fileHash\"\n}\n</code></pre>"},{"location":"cdi/integration/#using-cdi-proxy","title":"using CDI Proxy","text":""},{"location":"cdi/integration/#access-info-example_1","title":"access info example","text":"<pre><code>{\n  \"channel\": \"HTTPS\",\n  \"accessToken\": \"http_basic_authentication_password\",\n  \"fileType\": \"csv\",\n  \"endpointReverseProxy\": \" https://proxy-dataprovider-preprod.cdi.network/75f45deba96ff1b262b63180cb183ba4/OFPAYHFL1004DP/main data/ACCT12345 /data file 001.csv\",\n  \"fileHash\": \"$fileHash\",\n  ...\n}\n</code></pre>"},{"location":"cdi/integration/#last-file-indicator","title":"last file indicator","text":"<p>The last file <code>\"filePath\": \"/upload/completed.csv\"</code> is not physically exist. It indicates all data has been uploaded.</p> <pre><code>{\n    \"channel\": \"SFTP\",\n    \"endPoint\": \"${SFTP_HOSTNAME}:${SFTP_PORT}\",\n    \"accessToken\": \"SFTP_PRIVATE_KEY_NAME\",\n    \"fileType\": \"csv\",\n    \"filePath\": \"/upload/completed.csv\",\n    \"fileHash\": \"$fileHash\"\n  }\n</code></pre>"},{"location":"cdi/integration/#error-codes","title":"Error codes","text":"rejectReasonCode rejectReasonDetail [^1] &amp; description DataRequestRejectReasonInvalidConsent INVALID_CONSENT DataRequestRejectReasonInvalidScope INVALID_DATE_RANGE DataRequestRejectReasonCustomerNotFound CUSTOMER_NOT_FOUND DataRequestRejectReasonInvalidHashKeyOfRequestPrivate FILE_CHECKSUM_FAILED DataRequestRejectReasonInvalidPurpose INVALID_PURPOSE_VALUE DataRequestRejectReasonOthers [^NO_DATA] - No data found from the data request scope OTHER_REASON ConsentRejectReasonInvalidSignature INVALID_SIGNATURE ConsentRejectReasonInvalidExpireTime INVALID_EXPIRE_TIME ConsentRejectReasonInvalidScope INVALID_DATE_RANGE ConsentRejectReasonCustomerNotFound CUSTOMER_NOT_FOUND ConsentRejectReasonInvalidHashKey FILE_CHECKSUM_FAILED ConsentRejectReasonInvalidPurpose INVALID_PURPOSE_VALUE ConsentRejectReasonOthers OTHER_REASONINFO_MISMATCH - BR/CI &amp; Company name not matchBR_NOT_FOUNDCI_NOT_FOUNDINVALID_INFO - some data is invalid / auth code is invalidMISSING_INFO - some data is missing <p>[^1] example of explicit value in rejectReasonDetail:</p> <p>[^NO_DATA] No data found from the data request scope</p>"},{"location":"cdi/merchant%20data%20file%20specification/","title":"Merchant data file specification","text":""},{"location":"cdi/merchant%20data%20file%20specification/#data-file-naming","title":"Data file naming","text":"<p>merchant-V02-{MID}-{generation_timestamp}.csv</p> <p><code>MID</code>: Merchant ID</p> <p><code>generation_timestamp</code>: Unix timestamp of the file generation, e.g. 1587657600000 refers to 24th April 2020 00:00:00</p>"},{"location":"cdi/merchant%20data%20file%20specification/#file-content","title":"File Content","text":""},{"location":"cdi/merchant%20data%20file%20specification/#record-type","title":"Record type","text":"Record type description 00 header record (optional) 01 data header 02 data records 99 tailer record"},{"location":"cdi/merchant%20data%20file%20specification/#record-type-02-data-record","title":"record type 02 - Data record","text":"Field No description 1 record type 2 ID 3 Name 4 Role, e.g. merchant, store, etc 5 Address 6 Onboard date - format in YYYY-MM-DD 7 (Reserved) 8 (Reserved) 9 (Reserved)"},{"location":"cdi/merchant%20data%20file%20specification/#record-type-99-trailer-record","title":"record type 99 - trailer record","text":"Field No description 1 record type 2 no. of data rows"},{"location":"cdi/merchant%20data%20file%20specification/#samples-of-data-files","title":"Samples of data files","text":"<p>(privately shared)</p>"},{"location":"cdi/test%20values/","title":"Test values","text":""},{"location":"cdi/test%20values/#test-values","title":"Test values","text":"<p>For use in our test environment, we have created a set of test values for the following fields:</p> ENV Merchant Name Eng Merchant Name Chi BrNo CI MID QF merchant Auth Code Simulation test Merchant One \u4e00\u865f\u5546\u6237 10000001 12000001 11000001 11000001 normal test Merchant Two \u5546\u6237\u4e8c 10000002 12000002 11000002 11000002 big data file (&lt;20MB) test Merchant Three \u5546\u6237\u4e09 10000003 12000003 11000003 11000003 normal test Merchant Four \u5546\u6237\u56db 10000004 12000004 11000004 11000004 normal test Merchant Five \u5546\u6237\u4e94 10000005 12000005 11000005 11000005 big data file (&lt;20MB) test Merchant Six \u5546\u6237\u516d 10000006 12000006 11000006 11000006 large data file (&gt;20MB) test Merchant Seven \u5546\u6237\u4e03 10000007 12000007 11000007 11000007 large data file (&gt;20MB) test Merchant Eight \u5546\u6237\u516b 10000008 12000008 11000008 11000008 empty data file test Merchant Nine \u5546\u6237\u4e5d 10000009 12000009 11000009 11000009 empty data file"},{"location":"cdi/transaction%20data%20file%20specification/","title":"Transaction data file specification","text":""},{"location":"cdi/transaction%20data%20file%20specification/#data-file-naming","title":"Data file naming","text":"<p>TXN-V02-{MID}-{from:YYYYMMDD}-{to:YYYMMDD}-{generation_timestamp}[-{split_index}].csv</p> <p><code>MID</code>: Merchant ID</p> <p><code>from:YYYYMMDD</code>: Start date of the transaction, e.g. 20200101 refers to 1st Jan 2020 00:00:00</p> <p><code>to:YYYYMMDD</code>: End date of the transaction, e.g. 20200101 refers to 1st Jan 2020 23:59:59</p> <p><code>generation_timestamp</code>: Unix timestamp of the file generation, e.g. 1587657600000 refers to 24th April 2020 00:00:00</p> <p><code>split_index</code>: Optional, only present when the file is split into multiple files. e.g. 1 refers to the first file of the split files.</p>"},{"location":"cdi/transaction%20data%20file%20specification/#file-content","title":"File Content","text":""},{"location":"cdi/transaction%20data%20file%20specification/#record-type","title":"Record type","text":"Record type description 00 header record 01 transaction header 02 transaction detail 99 tailer record"},{"location":"cdi/transaction%20data%20file%20specification/#record-type-00-header-record","title":"record type 00 - Header record","text":"Field No description 1 record type 2 from date 3 to date 4 MID - QFPay merchant ID 5 SID - QFPay store ID (if applicable) 6 BR No. (8 digits) 7 no. of transactions in the current file 8 sum of amount of transactions in the current file 9 no. of transactions in the batch 10 sum of amount of transactions in the batch"},{"location":"cdi/transaction%20data%20file%20specification/#record-type-02-data-record","title":"record type 02 - Data record","text":"Field No description 1 Store Name 2 Cashier 3 Transaction type 4 Transaction Date 5 Transaction time 6 Transaction amount 7 Transaction status 8 Transaction ID 9 Original Transaction ID 10 Currency 11 UDID 12 Merchant Order ID 13 Remark 14 Store ID 15 External Order ID 16 Consumer Source"},{"location":"cdi/transaction%20data%20file%20specification/#record-type-99-trailer-record","title":"record type 99 - trailer record","text":"Field No description 1 record type 2 no. of transactions in the current file 3 sum of amount of transactions in the current file 4 no. of transactions in the batch 5 sum of amount of transactions in the batch"},{"location":"cdi/transaction%20data%20file%20specification/#samples-of-data-files","title":"Samples of data files","text":"<p>Data sample: https://cdn.qfpay.com.hk/cdi/data-samples/TXN-V02-11000001-20221001-20221002-1692085343502.csv</p>"},{"location":"integration/PaymentElement/","title":"QFPay Element SDK","text":"<p>create your own checkout flows by using QFPay prebuilt UI components</p>"},{"location":"integration/PaymentElement/#import-js-library","title":"import JS library","text":"<pre><code>// sanbox environment\n&lt;script src=\"https://cdn-int.qfapi.com/qfpay_element/qfpay.js\"&gt;&lt;/script&gt;\n// live test environment\n&lt;script src=\"https://test-cdn-hk.qfapi.com/qfpay_element/qfpay.js\"&gt;&lt;/script&gt;\n// production environment\n&lt;script src=\"https://cdn-hk.qfapi.com/qfpay_element/qfpay.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"integration/PaymentElement/#code-examples","title":"Code examples","text":"<ol> <li>payment mode <pre><code>//1.1 credit card form (visa/mastercard)\n\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize payment object\nconst payment = qfpay.payment()\n\n// set payment related parameters\npayment.pay({\n  goods_name: \"goods\",\n  paysource: \"payment_element\"\n}, \"e487a02e3e1143e482db765ccec63d58\")\n\n// initialize element object and generate card form\nconst elements = qfpay.element()\nelements.createEnhance({\n  selector: \"#container\"\n})\n\n// trigger card form submission and receive payment response\nconst response = qfpay.confirmPayment({\n  return_url: 'https://xxx.xxx.com'\n})\n</code></pre> <pre><code>//1.2 wallet list (including credit card form, Alipay HK, Alipay CN, WechatPay, QuickPass, FPS, Payme\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize payment object\nconst payment = qfpay.payment()\n\n// validate payment intent valye\nqfpay.retrievePaymentIntent()\n\n// set payment parameters\npayment.walletPay({\n    lang:  'zh-cn',\n    goods_info:  'goods_info',\n    goods_name:  \"goods_name\",\n    paysource:  \"payment_element_checkout\",\n    out_trade_no: intentParams.out_trade_no,\n    txamt:  intentParams.txamt,\n    txcurrcd:  intentParams.txcurrcd,\n},intentParams.payment_intent);\n// initalize element object and create wallet list\nconst  appearance = {\n    variables: {\n        colourComponentText:  'black',\n        colorQRCodeTopPromptContent:  '#000000',\n        colorQRCodeBottomPromptContent:  '#000000',\n        fontWeightQRCodeTopPrompt:  '900',\n        fontWeightQRCodeBottomPrompt:  '300'\n    },\n    billingAddressDisplay: {\n        city:  true,\n        address1:  true,\n        address2:  true,\n    }\n}\nconst elements = qfpay.element(appearance)\nelements.createWallet({\n    selector:  \"#container\"\n})\n\n//trigger submission and retrieve payment response\nconst response = qfpay.confirmWalletPayment({\nreturn_url:  'https://xxx.xxx.com'\n})\n</code></pre></li> <li>payment token creation mode <pre><code>//2.1 credit card form\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize token object\nconst token = qfpay.token()\n\n// set token cereation parameters\ntoken.intent({\n  paysource: \"payment_element\"\n},\"e487a02e3e1143e482db765ccec63d58\")\n\n// initialize element object,and generate card-form \nconst elements = qfpay.element()\nelements.createEnhance({\n  seletor: \"#container\",\n  element: \"token\"\n})\n\n// trigger form submission and receive response\nconst response = qfpay.createToken({\n  return_url: 'https://xxx.xxx.com'\n})\n</code></pre></li> </ol>"},{"location":"integration/PaymentElement/#instruction-manual","title":"Instruction Manual","text":"<p>```Prerequisites: import SDK library (qfpay.js) according to your environment and purpose <pre><code>##### global object QFPay and related APIs\n1. QFpay.config(params)\n```js\n/**\n * parameters: optional, Object, default valie: {region: 'hk', env: 'prod'},\n *      region possible values\uff1a\n *        'hk'      - live/live test\n *        'qa'      - sandbox\n *\n *      env possible values:\n *        'prod'    - live environment\n *        'test'    - live test environment\n *        'qa'      - sandbox environment\n * return: qfpay object\n * purpose: generate qfpay global object\n */\nconst qfpay = QFpay.config()\n</code></pre> 2. qfpay.retrievePaymentIntent() <pre><code>/**\n * parameters: N/A\n * return: response code, payment intent is available for use if '0000' value, otherwise not available\n * purpose: validate payment intent is correct and available for use\n */\nconst intentResponse = qfpay.retrievePaymentIntent()\n</code></pre></p> <ol> <li> <p>qfpay.element(appearance) <pre><code>/**\n * parameters: optional, Object, {theme: string, variables: Object, billingAddressDisplay: Object}\n *      theme: support only value 'night', night mode, \n *      if values are set in variables, the style will apply those values only\n *      variables: {\n *        fontFamily: 'cursive',         // Font Family\n *        fontWeight: '400',             // Font Weight\n *        colorText: 'black',            // Text Color\n *        sizeFontSubTitle: 'inherit',   // Font Size\n *        colourBackground: '#fff',      // Background Color\n *        colourPrimary: '#ced4da',      // Input Box Color\n *        colourComponentText: 'purple', // Input Box Text Color\n *        sizeComponentText: '15px',     // Input Box Font Size\n *        colourErrorMessage: '#da5d4a', // Error Message Color\n *        sizeErrorMessage: 'inherit'    // Error Message Font Size\n *        colorPaymentButton: '#000000' //payment button color\n *        colorPaymentButtonText: '#FFFFFF'  //payment button text color\n *        colorQRCodeTopPromptContent: '#000000'  // QRCode Top memo text color\n *        colorQRCodeBottomPromptContent: '#000000'  //QRCode bottom memo text color\n *       fontWeightQRCodeTopPrompt: '900'  //QRCode Top memo font weight\n *       fontWeightQRCodeBottomPrompt: '300'  //QRCode bottom memo font weight\n *      }\n *      billingAddressDisplay: {\n *        city: true      // flag for controlling displayment of city &amp;  postal code in billing address\n *        address1: true  // flag for controlling displayment of address1 in billing address\n *        address2: true  // flag for controlling displayment of address2 in billing address\n *      }\n * return\uff1aelement object\n * purpose: generate element object\n */\nconst elements = qfpay.element()\n</code></pre></p> </li> <li> <p>qfpay.payment() <pre><code>/**\n * parameters: N/A\n * return\uff1a payment object\n * purpose: generate payment object\n */\nconst qfpay = QFpay.config()\nconst payment = qfpay.payment()\n</code></pre></p> </li> <li> <p>qfpay.confirmPayment() <pre><code>/**\n * parameters\uff1aoptional, Object type, {return_url: 'https://xxx.xxx.xxx'}, the page will be redirect to specific page mentioned in return_url parameter after payment completed. Otherwise, will stay in the same page\n * return\uff1a\n *   1. card payment\n *      return value\uff1acode, description, out_trade_no, syssn\n *      '0000' response code if success payment,\n *      otherwise failure payment, error message can reference to description\n *\n *   2. ApplePay\n *      return value\uff1acode, description; \n *      code value:'1111', Applepay payment cancalled\n *      code value:'0000', payment success, can refer to description value for payment status description\n * purpose\uff1areturn payment result\n */\nconst paymentResponse = qfpay.confirmPayment({\n  return_url: 'https://www.baidu.com'\n})\n</code></pre></p> </li> <li> <p>qfpay.confirmWalletPayment() <pre><code>/**\n * parameters\uff1aoptional, Object type, {return_url: 'https://xxx.xxx.xxx'}, the page will be redirect to specific page mentioned in return_url parameter after payment completed. Otherwise, will stay in the same page\n * return\uff1a\n *   1. card payment\n *      return value\uff1acode, description, out_trade_no, syssn\n *      '0000' response code if success payment,\n *      otherwise failure payment, error message can reference to description\n * purpose\uff1areturn payment result\n */\nconst paymentResponse = qfpay.confirmPayment({\n  return_url: 'https://www.baidu.com'\n})\n</code></pre></p> </li> <li> <p>qfpay.token() <pre><code>/**\n * parameters: N/A\n * return\uff1atoken object\n * purpose: generate token object\n */\nconst qfpay = QFpay.config()\nconst payment = qfpay.token()\n</code></pre></p> </li> <li> <p>qfpay.retrieveTokenIntent() <pre><code>/**\n * parameters: N/A\n * return: code\n *     code value: '0000', token is available for use\n *     otherwise token is not available for use\n * purpose: validate token intent is correct and available for use\n */\nconst intentResponse = qfpay.retrievePaymentIntent()\n</code></pre></p> </li> <li> <p>qfpay.createToken() <pre><code>/**\n * \u53c2\u6570\uff1aoptional\uff0cObject\uff0c{return_url: 'https://xxx.xxx.xxx'},the page will be redirect to specific page mentioned in return_url parameter after action completed. Otherwise, will stay in the same page\n * \n * return\uff1acode,description,customer_id, card info,token info\n *     code value '0000', action success\n *     customer_id: QFPay generated customer Id\n *     card: {\n *         brand: \"xxxx\", // card scheme, e.g. VISA\n *         suffix: \"xxxx\" // card number last 4 digits, e.g. 1000\n *     }\n *     token: {\n *         event: \"CREATE\", // create token action\n *         token_id: \"xxxxxxx\" // generated payment token id\n *     }\n *     other code value, please refer to descirption value for fail reason\n * purpose\uff1areturn token related info.\n */\n</code></pre></p> </li> </ol>"},{"location":"integration/PaymentElement/#payment-object-and-apis","title":"payment object and APIs","text":"<p><pre><code>const qfpay = QFpay.config()\nconst payment = qfpay.payment()\n</code></pre> 1. payment.pay(params1, params2) <pre><code>/**\n * parameters\uff1a  \n *         params1\uff0cmandatory\uff0cObject, \n *              {goods_name: '', paysource: 'payment_element'}\n *               goods_name: goods name,optional;\n *               paysource: fixed, value:payment_element, mandatory\n *         params2, mandatory, string, payment intent value from API\n * extra special parameters in 'params1'\uff1a\n *         customer_id: params1 optional parameter\uff0cQFPay generated customer Id\n *         token_expiry: params1 optional parameter, Token expiry date\n *         token_reason: params1 optional parameter, Reason for token creation\n *         token_reference: params1 optional parameter, Reference for token\n *         no need pass above special parameters if use payment function only\n *         if would like to collect card information for tokenization purpose, then need pass above parameters\n * return: No\n * purpose\uff1aset payment parameters\n */\npayment.pay({\n  goods_name: 'goods',\n  paysource: 'payment_element'\n}, 'SDF8980SFFSDF890SDF')\n</code></pre> 2. payment.walletPay(params1, params2) <pre><code>/**\n * parameters:\n *     params1, mandatory, Object, { lang: 'zh-cn', goods_name: '', paysource: 'payment_element', paysource: \"payment_element_checkout\", out_trade_no: intentParams.out_trade_no, txamt: intentParams.txamt, txcurrcd: intentParams.txcurrcd}\n *     lang: language, optional, zh-cn:simplify chinese, zh-hk traditional chinese, en: english\n *     goodsname: goods name, optional,\n *     paysource: fix value, payment_element_checkout,mandatory\n *     out_trade_no: merchant order id, mandatory\n *     txamt: transaction amount, mandatory\n *     txcurrcd: transaction currency, mandatory\n *     params2, mandatory, string, payment intent value from \n * extra special parameters in 'params1':\n *         customer_id: params1 optional parameter\uff0cQFPay generated customer Id\n *         token_expiry: params1 optional parameter, Token expiry date\n *         token_reason: params1 optional parameter, Reason for token creation\n *         token_reference: params1 optional parameter, Reference for token\n *         no need pass above special parameters if use payment function only\n *         if would like to collect card information for tokenization purpose, then need pass above parameters\n * return: No\n * purpose\uff1aset payment parameters\n */\npayment.walletPay({\n    goods_info:  'goods_info',\n    goods_name:  \"goods_name\",\n    paysource:  \"payment_element_checkout\",\n    out_trade_no:  intentParams.out_trade_no,\n    txamt:  intentParams.txamt,\n    txcurrcd:  intentParams.txcurrcd,\n}, 'SDF8980SFFSDF890SDF')\n</code></pre></p> <ol> <li>payment.inquiry(params1, params2) <pre><code>/**\n * parameters: \n *      params1, mandatory\uff0c Object, {syssn: string, out_trade_no: string, pay_type: string, respcd: stirng, start_time: string, end_time: string} | {}\n *               syssn: QF QF system serial no, use comma to separate mutliple values\n *               out_trade_no: merchant order ID, use comma to separate multiple values\n *               pay_type: payment type, use comma to separate multiple values\n *               respcd: response code, default all response code\n *               start_time: start time, format: 'YYYY-MM-DD HH:mm:ss', default current month start\n *               end_time: end time, format: 'YYYY-MM-DD HH:mm:ss', default current month end\n *      params2, mandatory, string, payment intent from API\n * return: inquiry result\n * purpose\uff1ainquiry payment result\n */\nconst inquiryResponse = payment.inquiry({}, 'SDF8980SFFSDF890SDF')\n</code></pre></li> </ol>"},{"location":"integration/PaymentElement/#token-object-and-apis","title":"token object and APIs","text":"<p><pre><code>const qfpay = QFpay.config()\nconst token = qfpay.token()\n</code></pre> 1. token.intent(params1, params2) <pre><code>/**\n * parameters\uff1a\n *      params1, mandatory\uff0cObject, {paysource: 'payment_element'}\n *               paysource: fixed, value: payment_element\uff0cmandatory\n *      params2, mandatory, string, payment intent from API\n * return: N/A\n * purpose\uff1aset token intent parameters\n */\ntoken.intent({\n  paysource: 'payment_element'\n}, 'SDF8980SFFSDF890SDF')\n</code></pre></p>"},{"location":"integration/PaymentElement/#element-object-and-apis","title":"element object and APIs","text":"<pre><code>const qfpay = QFpay.config()\nconst elements = qfpay.element()\n</code></pre> <ol> <li> <p>elements.create(params1, params2, params3) --- support Visa/Mastercard card payment only <pre><code>/**\n * parameters\uff1a\n *      params1, mandatory, string, card form id\n *      params2, optional, boolean, default value is:true, card form will show email address input if true value\n *      params3, optional, string, default value:payment, generate card form\n * return: N/A\n * purpose: generate card form\n */\nelements.create(\"#container\")\n</code></pre></p> </li> <li> <p>elements.createEnhance(params) ---  support Visa Mastercard card payment, ApplePay payment,  token creation,  token creation in payment mode <pre><code>/**\n * parameters\uff1aparams: Object, {selector: string, email: boolean, tab: boolean, element: string}\n *      selector: mandatory, string, element wallet id\n *      email: optional, boolean, default value:true, card form will show email address input if true\n *      tab: optional, boolean, default value:false, \n *           true:  element wallet switch way is tab \n *           false: wallet list switch way is vertical list\n *      element: optional, string, default value:payment, \n *           payment: normal payment mode\n *           token: token creation mode  \n * return: N/A\n * purpose: generate element wallet\n * NOTICE\uff1atab parameter only effecitve in payment mode\n */\nelements.createEnhance({\n  selector: '#container'\n})\n</code></pre></p> </li> </ol>"},{"location":"integration/PaymentElement/#retrieve-selected-wallet-type","title":"retrieve selected wallet type","text":"<pre><code>window.addEventListener('walletType', ({detail}) =&gt; {\n  /**\n   * detail: possible: ApplePay and Card\n   * detail:ApplePay, selected payment method is applepay\n   * detail:Card, selected payment method is card payment\n   */\n})\n</code></pre>"},{"location":"integration/Transaction%20Enquiry/","title":"Transaction Enquiry","text":"If the <code>mchid</code> is provided, it is mandatory to submit the <code>mchid</code> when calling the API (unless otherwise specified). On the contrary, if <code>mchid</code> is not provided, merchants shall not pass the <code>mchid</code> field in the API request."},{"location":"integration/Transaction%20Enquiry/#api-endpoint-for-transaction-enquiry","title":"API Endpoint for Transaction Enquiry","text":""},{"location":"integration/Transaction%20Enquiry/#http-request","title":"HTTP Request","text":"<p><code>POST ../trade/v1/query</code></p> plaintextpythonjavajavascriptphp <pre><code>Request Header:\n\n{\nContent-Type: application/x-www-form-urlencoded;\nX-QF-APPCODE: D5589D2A1F2E42A9A60C37**********\nX-QF-SIGN: 6FB43AC29175B4602FF95F8332028F19\n}\n\nRequest Body:\n\n{\nmchid=ZaMVg*****&amp;syssn=20191227000200020061752831&amp;start_time=2019-12-27 00:00:00&amp;end_time=2019-12-27 23:59:59\n}\n</code></pre> <pre><code>import urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse, hashlib\nimport requests\nfrom hashids import Hashids\nimport datetime\nimport string\nimport random\n\n# Enter Client Credentials\nenvironment = 'https://openapi-test.qfpay.com'\napp_code = 'D5589D2A1F2E42A9A60C37**********'\nclient_key = '0E32A59A8B454940A2FF39**********'\n\n# Create parameter values for data payload\ncurrent_time = datetime.datetime.now().replace(microsecond=0)         \nrandom_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=32))                       \n\n\n# Create signature\ndef make_req_sign(data, key):\n    keys = list(data.keys())\n    keys.sort()\n    p = []\n    for k in keys: \n        v = data[k]\n        p.append('%s=%s'%(k,v))\n    unsign_str = ('&amp;'.join(p) + key).encode(\"utf-8\")\n    s = hashlib.md5(unsign_str).hexdigest()\n    return s.upper()\n\n\n# Body payload\nmchid = 'ZaMVg*****' #(Agent ID, Merchant ID)\nsyssn = '20191227000200020061752831' #Search by transaction number only\nout_trade_no = '2019122722001411461404119764' #Search by out_trade_no only\nstart_time = '2019-12-27 00:00:00'\nend_time = '2019-12-27 23:59:59'\nkey = client_key\n\n\n#data ={'mchid': mchid, 'syssn': syssn, 'out_trade_no': out_trade_no, 'start_time': start_time, 'end_time': end_time}\ndata ={'mchid': mchid, 'syssn': syssn}\n\nr = requests.post(environment+\"/trade/v1/query\",data=data,headers={'X-QF-APPCODE':app_code,'X-QF-SIGN':make_req_sign(data, key)})\n\nprint(make_req_sign(data, key))  \nprint(r.json())\n</code></pre> <pre><code>import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n\npublic class Enquiry {\n    public static void main(String args[]){\n        String appcode=\"D5589D2A1F2E42A9A60C37**********\";\n        String key=\"0E32A59A8B454940A2FF39*********\";\n        String mchid=\"ZaMVg*****\"; // Only Agents must provide the mchid\n\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String date=df.format(new Date());\n        String txdtm=date;\n\n        String syssn=\"20191227000300020061662295\";\n        String start_time = \"2019-12-27 00:00:00\";\n        String end_time = \"2019-12-27 23:59:59\";\n\n        Map&lt;String, String&gt; unsortMap = new HashMap&lt;&gt;();\n        unsortMap.put(\"mchid\", mchid);\n        unsortMap.put(\"syssn\", syssn);\n\n        String data=QFPayUtils.getDataString(unsortMap);\n        System.out.println(\"Data:\\n\"+data+key);\n        String md5Sum=QFPayUtils.getMd5Value(data+key);\n        System.out.println(\"Md5 Value:\\n\"+md5Sum);\n\n        String url=\"https://openapi-test.qfpay.com\";\n        String resp= Requests.sendPostRequest(url+\"/trade/v1/query\", data, appcode,key);\n        System.out.println(resp);\n    }\n}\n</code></pre> <pre><code>// Enter Client Credentials\nconst environment = 'https://openapi-test.qfpay.com'\nconst app_code = 'D5589D2A1F2E42A9A60C37**********'\nconst client_key = '0E32A59A8B454940A2FF39**********'\n\n// Generate Timestamp\nvar dateTime = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/, '')\nconsole.log(dateTime)\n\n// Body Payload\nconst key = client_key\nvar tradenumber = String(Math.round(Math.random() * 1000000000))\nconsole.log(tradenumber)\n\nvar payload = {\n'syssn': '20191231000300020063521806',\n'start_time': '2019-12-27 00:00:00',\n'end_time': '2019-12-31 23:59:59',\n'mchid': 'ZaMVg*****'\n};\n\n// Signature Generation\nconst ordered = {};\nObject.keys(payload).sort().forEach(function(key) {\nordered[key] = payload[key] });\nconsole.log(ordered)\n\nvar str = [];\nfor (var p in ordered)\nif (ordered.hasOwnProperty(p)) {\nstr.push((p) + \"=\" + (ordered[p]));\n}\nvar string = str.join(\"&amp;\")+client_key;\nconsole.log(string)\n\nconst crypto = require('crypto')\nvar hashed = crypto.createHash('md5').update(string).digest('hex')\nconsole.log(hashed)\n\n\n// API Request\nvar request = require(\"request\");\nrequest({\nuri: environment+\"/trade/v1/query\",\nheaders: {\n    'X-QF-APPCODE': app_code,\n    'X-QF-SIGN': hashed\n},\nmethod: \"POST\",\nform: payload,\n}, \nfunction(error, response, body) {\nconsole.log(body);\n});\n</code></pre> <pre><code>&lt;?php\nob_start();\nfunction GetRandStr($length){\n$str='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n$len=strlen($str)-1;\n$randstr='';\nfor($i=0;$i&lt;$length;$i++){\n$num=mt_rand(0,$len);\n$randstr .= $str[$num];\n}\nreturn $randstr;\n}\n\n    $url = 'https://test-openapi-eur.qfapi.com';\n    $api_type = '/trade/v1/query';\n    $syssn = '20200311066100020000977841';\n    //$out_trade_no = 'zCvo0IqTg0SaQkGnHd6w';\n    //$mchid = \"MNxMp11FV35qQN\"; //Only agents must provide this parameter\n    $app_code = 'FF2FF74F2F2E42769A4A73*********'; //API credentials provided by QFPay\n    $app_key = '7BE791E0FD2E48E6926043B*********'; //API credentials provided by QFPay\n    $now_time = date(\"Y-m-d H:i:s\"); //Get the current date-time  \n\n    $fields_string = '';\n    $fields = array(\n    //'mchid' =&gt; urlencode($mchid),\n    'syssn' =&gt; urlencode($syssn),\n    //'out_trade_no' =&gt; urlencode($out_trade_no),\n    //'start_time' = '2020-03-01 00:00:00',\n    //'end_time' = '2020-03-04 23:59:59'\n    );\n    ksort($fields); //Sort parameters in ascending order from A to Z\n    print_r($fields);\n\n    foreach($fields as $key=&gt;$value) { \n    $fields_string .= $key.'='.$value.'&amp;' ;\n}\n$fields_string = substr($fields_string , 0 , strlen($fields_string) - 1); \n\n$sign = strtoupper(md5($fields_string . $app_key));\n\n//// Header ////\n$header = array();\n$header[] = 'X-QF-APPCODE: ' . $app_code;\n$header[] = 'X-QF-SIGN: ' . $sign;\n\n//Post Data\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url . $api_type);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $header);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);\n$output = curl_exec($ch);\ncurl_close($ch);    \n\n$final_data = json_decode($output, true);\nprint_r($final_data);\n\nob_end_flush();\n?&gt;\n</code></pre> <p>The above command returns JSON structured like this:</p> <pre><code>{\n\"respmsg\": \"\", \n\"resperr\": \"\u8bf7\u6c42\u6210\u529f\", \n\"respcd\": 0000, \n\"data\": \n[{\n\"cardtp\": \"5\", \n\"cancel\": \"0\", \n\"pay_type\": \"800101\", \n\"order_type\": \"payment\", \n\"clisn\": \"038424\", \n\"txdtm\": \"2019-12-27 10:39:39\", \n\"goods_detail\": \"\", \n\"out_trade_no\": \"CHZ7D61JN1ANJF2R2K1I7TXP2JTCEWBL\", \n\"syssn\": \"20191227000200020061752831\", \n\"sysdtm\": \"2019-12-27 10:40:24\", \n\"paydtm\": \"2019-12-27 10:42:18\", \n\"goods_name\": \"\", \n\"txcurrcd\": \"EUR\", \n\"chnlsn2\": \"\", \n\"udid\": \"qiantai2\", \n\"userid\": \"2605489\", \n\"txamt\": \"10\", \n\"chnlsn\": \"2019122722001411461404119764\", \n\"respcd\": \"0000\", \n\"goods_info\": \"\", \n\"errmsg\": \"success\"\n}], \n\"page\": \"1\", \n\"page_size\": \"10\"\n}\n</code></pre> <p>After making a payment, refund or cancellation request, the merchant can use the query interface to obtain the transaction status.</p> <p>The merchant can use the query interface to enquire transaction status of one or multiple transactions. In case the interface does not return <code>syssn</code> in time, use <code>out_trade_no</code> as a condition to query the transaction status.</p> <p>If merchants would like to query transactions in a month, they can provide <code>start_time</code> and <code>end_time</code> then records will be filtered according to the system transaction time <code>sysdtm</code>. The interval must be within one calendar month. Otherwise, it is recommended to include the <code>syssn</code> parameter as a query condition.</p> <p>When the query transaction is a refund then an additional parameter <code>origssn</code> will be returned. The <code>origssn</code> shows the QFPay transaction number of the original transaction that has been refunded.   </p>"},{"location":"integration/Transaction%20Enquiry/#request-parameters","title":"Request Parameters","text":"Parameter name Parameter code Mandatory Parameter type Description Merchant number <code> mchid </code> For Agents String(16) If MCHID is given, it is mandatory to provide the <code>mchid.</code>On the contrary, if <code> mchid</code> is not provided, merchants shall not pass the <code>mchid</code> field in the API request. QFPay transaction number <code> syssn </code> No String(128) Multiple entries are seperated by commas API order number <code> out_trade_no </code> No String(128) External transaction number / Merchant platform transaction number, multiple entries are seperated by commas Payment type <code> pay_type </code> No String(6) Multiple entries are seperated by commas Transaction return code <code> respcd </code> No String(4) Returns all orders with return code status by default Starting time <code> start_time </code> No String(20) It is ignored when <code>syssn</code> or <code>out_trade_number</code> is provided. The default date time is the start of current month. Cross-month queries must add the time query parameters <code>start_time</code> and <code>end_time</code>. Format: YYYY-MM-DD hh:mm:ss End Time <code> end_time </code> No String(20) It is ignored when <code>syssn</code> or <code>out_trade_number</code> is provided. The default date time is the end of current month. Cross-month queries must add the time query parameters <code>start_time</code> and <code>end_time</code>. Format: YYYY-MM-DD hh:mm:ss Time zone <code> txzone </code> No String(5) Used to record the local order time. The default is Beijing time UTC+8 (+0800) Number of pages <code> page </code> No Int(8) Default value is 1 Number of items displayed per page <code> page_size </code> No Int(8) By default 10 transactions will be displayed. The maximum <code>page_size</code> value is 100"},{"location":"integration/Transaction%20Enquiry/#response-parameters","title":"Response Parameters","text":"Parameter name Parameter code Parameter type Description Page number <code>page</code> Int(8) Request result description <code>resperr</code> String(128) Display number of items per page <code>page_size</code> Int(8) Request result code <code>respcd</code> String(4) 0000 - Interface call succeeded Query result <code>data</code> Object JSON format QFPay transaction number <code>syssn</code> String(40) API order number <code>out_trade_no</code> String(128) External transaction number / Merchant platform transaction number Wallet/Channel transaction number <code>chnlsn</code> String Product name <code>goods_name</code> String(64) Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. Cannot be empty for app payment. Parameter needs to be UTF-8 encoded if it is written in Chinese characters. Transaction currency <code>txcurrcd</code> String(3) View the Currencies table for a complete list of available currencies Original transaction number <code>origssn</code> String(40) Refers to the original QFPay transaction number. This parameter is only available when the <code>syssn</code> of a refund is queued Payment type <code>pay_type</code> String(6) Please refer to the section Payment Codes for a complete list of payment types Order type <code>order_type</code> String(16) Payment: Payment transaction Refund: Refund transaction Request transaction time <code>txdtm</code> String(20) Request transaction time provided by merchant in payment and refund request. Format: YYYY-MM-DD hh:mm:ss Transaction amount <code>txamt</code> Int(11) Amount of the transaction. Unit in cents (i.e. 100 = $1) System transaction time <code>sysdtm</code> String(20) Format: YYYY-MM-DD hh:mm:ss  This parameter value is used as the cut-off time for settlements. Cancellation or refund indicator <code>cancel</code> String(1) Transaction cancel status:  0 = Not cancelled  1 = For CPM: Transaction reversed or refunded successfully  2 = For MPM: Transaction canceled successfully  3 = Transaction refunded  4 = Alipay Preauth order finished  5 = Transaction partially refunded Payment status <code>respcd</code> String(4) 0000 = transaction succeeded  1143/1145 = Please wait to evaluate the transaction status. All other response codes indicate transaction failure Payment status message <code>errmsg</code> String(128) Payment result description Currency exchange rate <code>exchange_rate</code> String Applied currency conversion exchange rate Net payment amount <code>cash_fee</code> String Actual payment amount by user = transaction amount - discounts Payment currency <code>cash_fee_type</code> String Actual payment currency e.g. CNY Net refund amount <code>cash_refund_fee</code> String Actual refund amount Refund currency <code>cash_refund_fee_type</code> String Actual refund currency e.g. CNY"},{"location":"integration/Transaction%20Enquiry/#account-statement","title":"Account Statement","text":"<p>The clearing statement for a particular payment channel is downloaded regularly. Additional requests can only be made in the production environment. The system response is in form of a compressed zip file. Data is based on the selected payment channel and contains all merchants therefore the <code>mchid</code> cannot be passed in as a request parameter.</p>"},{"location":"integration/Transaction%20Enquiry/#api-endpoint-for-account-statement","title":"API Endpoint for Account Statement","text":""},{"location":"integration/Transaction%20Enquiry/#http-request_1","title":"HTTP Request","text":"<p><code>GET ../download/v1/trade_bill</code></p>"},{"location":"integration/Transaction%20Enquiry/#request-parameter","title":"Request Parameter","text":"Request code Mandatory Parameter type Description <code>trade_date</code> Yes String(10) Get a specific account statement for the selected date. Example: 2017-10-17"},{"location":"integration/alipay%20service%20window%20h5/","title":"Alipay Service Window H5","text":""},{"location":"integration/alipay%20service%20window%20h5/#flow-chart","title":"flow chart","text":"<pre><code>sequenceDiagram\n  participant c as Customer\n  participant aa as Alipay App \n  participant m as Merchant\n  participant qf as QF Pay\n  participant a as Alipay\n\n  c-&gt;&gt;+m:enter the merchant page\n  %%c-&gt;&gt;+aa:enter the merchant page\n  c-&gt;&gt;+m:place order\n  %%aa-&gt;&gt;+m:place order\n  m-&gt;&gt;+qf:send payment request\n  qf-&gt;&gt;+a:send payment request\n  a-&gt;&gt;a:verify transaction\n  a--&gt;&gt;-qf:return the pre-paid order information\n  qf--&gt;&gt;-m:return the pre-paid order information\n  m--&gt;&gt;-aa:invoke the SDK with the returned paramters\n  c-&gt;&gt;+aa:The user click\n  aa-&gt;&gt;+a:initiate payment\n  a-&gt;&gt;a:verify payment parameters\n  a--&gt;&gt;-aa:prompt user for authorization\n  c-&gt;&gt;aa:authorise payment\n  aa-&gt;&gt;+a:authorise payment\n  a-&gt;&gt;a:verify authorisation\n  a--&gt;&gt;aa:show deduction result to the user\n  aa--&gt;&gt;-c:show result\n  a--&gt;&gt;-qf:return payment result\n  qf--&gt;&gt;m:return payment result</code></pre>"},{"location":"integration/alipay%20service%20window%20h5/#alipay-service-window-h5-payment-wap","title":"Alipay Service Window H5 Payment (WAP)","text":"<p>Alipay Service Window H5 Payment enables merchants to call the Alipay payment module by using the JSAPI interface to collect payments. The customer checks out on the merchant's mobile website in Alipay, confirms the total amount and makes the payment.</p>"},{"location":"integration/alipay%20service%20window%20h5/#http-request","title":"HTTP Request","text":"<p><code>POST ../trade/v1/payment</code> <code>PayType: 800107</code></p> <p>Step 1: Get User ID For more details about how to acquire the user id please refer to the official Alipay documentation. </p> <p>Step 2: Request Payment</p>"},{"location":"integration/alipay%20service%20window%20h5/#payment-parameters","title":"Payment Parameters","text":"Parameter name Parameter code Mandatory Parameter type Description Public payment parameters \u2014 \u2014 \u2014 \u2014 Alipay authorization code <code>openid</code> Yes String(64) The <code>user_id</code> is returned by the interface, e.g. 2088802811715388 Redirect URL <code>return_url</code> No String(512) Address for user redirect after successful payment Designated payment method <code>limit_pay</code> No String Only applicable for mainland China"},{"location":"integration/alipay%20service%20window%20h5/#response-parameters","title":"Response Parameters","text":"Parameter name Secondary parameter code Parameter type Parameter name Description <code>pay_params</code> <code>tradeNO</code> String Transaction number Provide the transaction number in the call function <code>txcurrcd</code> String(3) Transaction currency. View the Currencies table for a complete list of available currencies Public response parameters \u2014 \u2014 \u2014 \u2014 <p>Step 3: Payout through the cashout interface For more information regarding the cashout interface please refer to the official Alipay documentation.</p>"},{"location":"integration/alipay%20service%20window%20h5/#alipay-pre-authorization","title":"Alipay Pre-Authorization","text":""},{"location":"integration/alipay%20service%20window%20h5/#freeze-funds","title":"Freeze Funds","text":"<p>At the moment only Alipay wallet funds can be used for pre-authorization, credit-cards are not supported. Authorization requests lose their validity after 15min. In case of technical or currency related integration difficulties please contact technical.support@qfpay.global for support. Merchants can, at any time, unfreeze the funds in which case the assets will be available for spending on the original wallet. In addition, merchants can initiate a transfer for a fraction or all of the frozen funds in order to collect money for open customer invoices.</p>  Alipay pre-authorization currently supports the following currencies: AUD, HKD, MYR, NZD, PHP, SGD, THB and USD <p> </p>"},{"location":"integration/alipay%20service%20window%20h5/#http-request_1","title":"HTTP Request","text":"<p><code>POST ../trade/v1/payment</code> </p> <p>Find the correct <code>pay_type</code> for your checkout szenario from the table below.</p> PayType Description 801801 Alipay Pre-Authorization in-store QRC Payment - Consumer Present Mode (CPM) 801808 Alipay Pre-Authorization in-store QRC Payment - Merchant Present Mode (MPM) 801810 Alipay Pre-Authorization in-APP Payment 801814 Alipay Pre-Authorization Online Payment"},{"location":"integration/payment/","title":"Payment","text":""},{"location":"integration/payment/#paytype-table","title":"PayType Table","text":"Code Description 800008 Consumer Present QR Code Mode (CPM) for WeChat, Alipay, UNIONPAY Quick Pass 800101 Alipay Merchant Presented QR Code Payment in store (MPM) (Overseas Merchants) 800108 Alipay Consumer Presented QR Code Payment (CPM) (Overseas &amp; HK Merchants) 801101 Alipay Online WEB (in browser Chrome etc.) Payment (Overseas Merchants) ** 801107 Alipay Online WAP (in mobile browser Chrome etc.) Payment (Overseas Merchants) 801110 Alipay in-APP Payments (Overseas Merchants) 800107 Alipay Service Window H5 Payment (in Alipay APP H5 payments) 801501 Alipay Merchant Presented QR Code (MPM) Payment (HK Merchants) 801510 Alipay In-App Payment (HK Merchants) 801512 Alipay Online WAP Payment (HK Merchants) 801514 Alipay Online WEB Payment (HK Merchants) 800201 WeChat Merchant Presented QR Code Payment (MPM) (Overseas &amp; HK Merchants) 800208 WeChat Consumer Presented QR Code Payment (CPM) (Overseas &amp; HK Merchants) 800207 WeChat JSAPI Payment - WeChat Official Account Payment (in Wechat App)(Overseas &amp; HK Merchants) 800212 WeChat JSAPI Payment - WeChat Official Account Payment (in Wechat App)(CA Merchants)**** 800210 WeChat in-APP Payment (Overseas &amp; HK Merchants) 800213 WeChat Mini-Program Payment (Overseas &amp; HK Merchants) 801008 WeChat Pay HK Consumer Presented QR Code Payment (CPM) (Direct Settlement, HK Merchants) 801010 WeChat Pay HK In-App Payment (Direct Settlement, HK Merchants) 805801 PayMe Merchant Presented QR Code Payment in store (MPM) (HK Merchants) 805808 PayMe Consumer Presented QR Code Payment (CPM) (HK Merchants) 805814 PayMe Online WEB (in browser Chrome etc.) Payment (HK Merchants) 805812 PayMe Online WAP (in mobile browser Chrome etc.) Payment (HK Merchants) 805810 PayMe In-App Payment (HK Merchants) 800701 UNIONPAY Quick Pass Merchant Presented QR Code Payment (MPM) 800708 UNIONPAY Quick Pass Consumer Presented QR Code Payment (CPM) 801208 LINEPAY dynamic QRC Payment - Consumer Present Mode (CPM) (TH Merchants) 801301 LINEPAY Online Payment (TH Merchants) 801408 AIRPAY dynamic QRC Payment - Consumer Present Mode (CPM) (TH Merchants) 801701 NETSPAY Merchant Presented QR Code Payment (MPM) 801801 Alipay Pre-Authorization dynamic QRC Payment - Consumer Present Mode (CPM) 801808 Alipay Pre-Authorization dynamic QRC Payment - Merchant Present Mode (MPM) 801810 Alipay Pre-Authorization in-APP Payment 801814 Alipay Pre-Authorization Online Payment 801908 Origami Consumer Presented QR Code Payment (CPM) 802001 FPS Merchant Presented QR Code Payment (MPM) (HK Merchants)*** 802201 AIRPAY Online Payment (TH Merchants) 802301 PayNow Merchant Presented QR Code Payment (MPM) (SG Merchants)*** 802901 PromptPay dynamic QRC Payment - Merchant Present Mode (MPM) (TH Merchants)*** 803001 eWallet dynamic QRC Payment - Merchant Present Mode (MPM) 803008 eWallet dynamic QRC Payment - Consumer Present Mode (CPM) 803101 VIA dynamic QRC Payment - Merchant Present Mode (MPM) (JP and HK Merchants) 803108 VIA dynamic QRC Payment - Consumer Present Mode (CPM) (JP and HK Merchants) 803208 Touch 'n Go (TNG) dynamic QRC Payment - Consumer Present Mode (CPM) (MY Merchants) 803214 Touch 'n Go (TNG) Online Payment (MY Merchants)** 803301 Razer dynamic QRC Payment - Merchant Present Mode (MPM) (MY Merchants) 803308 Razer dynamic QRC Payment - Consumer Present Mode (CPM) (MY Merchants) 803314 Razer Online Payment ** (MY Merchants) 803701 Octopus dynamic QRC Payment - Merchant Present Mode (MPM) (HK Merchants) 803712 Octopus WAP Payment (HK Merchants) 803801 Dash dynamic QRC Payment - Merchant Present Mode (MPM) (SG Merchants) 803808 Dash dynamic QRC Payment - Consumer Present Mode (CPM) (SG Merchants) 804001 Boost dynamic QRC Payment - Merchant Present Mode (MPM) (MY Merchants) 804008 Boost dynamic QRC Payment - Consumer Present Mode (CPM) (MY Merchants) 804014 Boost Online Payment (MY Merchants)** 804101 Maybank dynamic QRC Payment - Merchant Present Mode (MPM) (MY Merchants) 804108 Maybank dynamic QRC Payment - Consumer Present Mode (CPM) (MY Merchants) 804114 Maybank Online Payment (MY Merchants)** 804201 GrabPay dynamic QRC Payment - Merchant Present Mode (MPM) (MY and SG Merchants) 804208 GrabPay dynamic QRC Payment - Consumer Present Mode (CPM) (MY Merchants) 804214 GrabPay Online Payment (MY Merchant)* (SG Merchants) 805208 TrueMoney dynamic QRC Payment - Consumer Present Mode (CPM) (TH Merchants) 805401 ThaiQR dynamic QRC Payment - Merchant Present Mode (MPM) (SG and MY Merchants)*** 805508 Credit Card: first_data Quick Payment Mode (HK Merchant) 805514 Credit Card: first_data Security Verification Payment Mode (HK Merchants) 805601 GoPay dynamic QRC Payment - Merchant Present Mode (MPM)*** 805612 GoPay WAP Payment***"},{"location":"integration/payment/#currencies","title":"Currencies","text":"<p>The below listed currencies are currently available in our payment network. Please consult technical.support@qfpay.global to verify that your API credentials and selected <code>pay_type</code> support your desired currency.</p> Code Description AED Arab Emirates Dirham CNY Chinese Yuan EUR Euro HKD Hong Kong Dollar IDR Indonesian Rupiah JPY Japanese Yen MMK Myanmar Kyat MYR Malaysian Ringgit SGD Singapore Dollar THB Thai Baht USD United States Dollar CAD Canadian Dollar AUD Australian Dollar"},{"location":"integration/payment/#api-endpoint-for-payments","title":"API Endpoint for Payments","text":"shellpythonjavajavascriptphp <pre><code>Request Header:\n\n{\n  Content-Type: application/x-www-form-urlencoded;\n  X-QF-APPCODE: D5589D2A1F2E42A9A60C37**********\n  X-QF-SIGN: 6FB43AC29175B4602FF95F8332028F19\n}\n\nRequest Body:\n\n{\n  mchid=ZaMVg*****&amp;out_trade_no=01234567890123&amp;pay_type=800101&amp;txamt=10&amp;txcurrcd=EUR&amp;txdtm=2019-12-25 14:21:28\n}\n</code></pre> <pre><code>#coding=utf8\nimport urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse, hashlib\nimport requests\nimport datetime\nimport string\n\n# Enter Client Credentials\nenvironment = 'https://openapi-test.qfpay.com'\napp_code = 'D5589D2A1F2E42A9A60C37*********'\nclient_key = '0E32A59A8B454940A2FF39**********'\n\n\n# Create parameter values for data payload\ncurrent_time = datetime.datetime.now().replace(microsecond=0)                                \n\nprint(current_time)\n\n# Create signature\ndef make_req_sign(data, key):\n    keys = list(data.keys())\n    keys.sort()\n    p = []\n    for k in keys: \n        v = data[k]\n        p.append('%s=%s'%(k,v))\n    unsign_str = ('&amp;'.join(p) + key).encode(\"utf-8\")\n    s = hashlib.md5(unsign_str).hexdigest()\n    return s.upper()\n\n\n# Body payload\ntxamt = '10' #In USD,EUR,etc. Cent\ntxcurrcd = 'EUR'\npay_type = '800101' # Alipay CPM = 800108 , MPM = 800101\nauth_code='283854702356157409' #CPM only\nout_trade_no = '01234567890123'\ntxdtm = current_time\ngoods_name = 'test1'   \nauth_code = '280438849930815813'\nmchid = 'ZaMVg*****'\nkey = client_key\n\n\n#data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name, 'udid': udid, 'auth_code': auth_code, 'mchid': mchid}\ndata ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'mchid': mchid}\n\nr = requests.post(environment+\"/trade/v1/payment\",data=data,headers={'X-QF-APPCODE':app_code,'X-QF-SIGN':make_req_sign(data, key)})\n\nprint(r.json())\n</code></pre> <pre><code>import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TestMain {\n    public static void main(String args[]){\n        String appcode=\"D5589D2A1F2E42A9A60C37*********\";\n        String key=\"0E32A59A8B454940A2FF39*********\";\n        String mchid=\"ZaMVg*****\";\n\n        String pay_type=\"800101\";\n        String out_trade_no= \"01234567890123\";\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String date=df.format(new Date());\n        String txdtm=date;\n        String txamt=\"10\";\n        String txcurrcd=\"EUR\";\n\n        Map&lt;String, String&gt; unsortMap = new HashMap&lt;&gt;();\n        unsortMap.put(\"mchid\", mchid);\n        unsortMap.put(\"pay_type\", pay_type);\n        unsortMap.put(\"out_trade_no\", out_trade_no);\n        unsortMap.put(\"txdtm\", txdtm);\n        unsortMap.put(\"txamt\", txamt);\n        unsortMap.put(\"txcurrcd\", txcurrcd);\n        //unsortMap.put(\"product_name\", product_name);\n        //unsortMap.put(\"valid_time\", \"300\");\n\n        String data=QFPayUtils.getDataString(unsortMap);\n        System.out.println(\"Data:\\n\"+data+key);\n        String md5Sum=QFPayUtils.getMd5Value(data+key);\n        System.out.println(\"Md5 Value:\\n\"+md5Sum);\n\n        String url=\"https://openapi-test.qfpay.com\";\n        String resp= Requests.sendPostRequest(url+\"/trade/v1/payment\", data, appcode,key);\n        System.out.println(resp);\n    }\n}\n</code></pre> <pre><code>// Enter Client Credentials\nconst environment = 'https://openapi-test.qfpay.com'\nconst app_code = 'D5589D2A1F2E42A9A60C37*********'\nconst client_key = '0E32A59A8B454940A2FF39*********'\n\n// Generate Timestamp\nvar dateTime = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/, '')\nconsole.log(dateTime)\n\n// Body Payload\nconst key = client_key\nvar tradenumber = String(Math.round(Math.random() * 1000000000))\nconsole.log(tradenumber)\n\nvar payload = {\n'txamt': '10', // In USD,EUR,etc. Cent\n'txcurrcd': 'EUR',\n'pay_type': '800101', // Alipay CPM = 800108 , MPM = 800101\n'out_trade_no': tradenumber,\n'txdtm': dateTime,\n'mchid': 'ZaMVg*****'\n};\n\n// Signature Generation\nconst ordered = {};\nObject.keys(payload).sort().forEach(function(key) {\n  ordered[key] = payload[key] });\nconsole.log(ordered)\n\nvar str = [];\nfor (var p in ordered)\nif (ordered.hasOwnProperty(p)) {\nstr.push((p) + \"=\" + (ordered[p]));\n}\nvar string = str.join(\"&amp;\")+client_key;\nconsole.log(string)\n\nconst crypto = require('crypto')\nvar hashed = crypto.createHash('md5').update(string).digest('hex')\nconsole.log(hashed)\n\n\n// API Request\nvar request = require(\"request\");\nrequest({\n  uri: environment+\"/trade/v1/payment\",\n  headers: {\n    'X-QF-APPCODE': app_code,\n    'X-QF-SIGN': hashed\n  },\n  method: \"POST\",\n  form: payload,\n  }, \n  function(error, response, body) {\n  console.log(body);\n});\n</code></pre> <pre><code>&lt;?php\nob_start();\n  function GetRandStr($length){\n  $str='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  $len=strlen($str)-1;\n  $randstr='';\n  for($i=0;$i&lt;$length;$i++){\n  $num=mt_rand(0,$len);\n  $randstr .= $str[$num];\n  }\n  return $randstr;\n  }\n\n    $url = 'https://test-openapi-eur.qfapi.com';\n    $api_type = '/trade/v1/payment';\n    $pay_type = '800101';\n    //$mchid = \"MNxMp11FV35qQN\"; //Only agents must provide this parameter\n    $app_code = 'FF2FF74F2F2E42769A4A73*********'; //API credentials are provided by QFPay\n    $app_key = '7BE791E0FD2E48E6926043B*********'; //API credentials are provided by QFPay\n    $now_time = date(\"Y-m-d H:i:s\"); //Get current date-time\n\n    $fields_string = '';\n    $fields = array(\n      //'mchid' =&gt; urlencode($mchid),\n      'pay_type' =&gt; urlencode($pay_type),\n      'out_trade_no' =&gt; urlencode(GetRandStr(20)),\n      'txcurrcd' =&gt; urlencode('EUR'),\n      'txamt' =&gt; urlencode(2200),\n      'txdtm' =&gt; $now_time\n    );\n    ksort($fields); //Ascending dictionary sorting A-Z\n    print_r($fields);\n\n    foreach($fields as $key=&gt;$value) { \n  $fields_string .= $key.'='.$value.'&amp;' ;\n  }\n  $fields_string = substr($fields_string , 0 , strlen($fields_string) - 1);\n\n  $sign = strtoupper(md5($fields_string . $app_key));\n\n  //// Header ////\n  $header = array();\n  $header[] = 'X-QF-APPCODE: ' . $app_code;\n  $header[] = 'X-QF-SIGN: ' . $sign;\n\n  //Post Data\n  $ch = curl_init();\n  curl_setopt($ch, CURLOPT_URL, $url . $api_type);\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n  curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n  curl_setopt($ch, CURLOPT_POST, 1);\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);\n  $output = curl_exec($ch);\n  curl_close($ch);    \n\n  $final_data = json_decode($output, true);\n  print_r($final_data);\n\nob_end_flush();\n?&gt;\n</code></pre>"},{"location":"integration/payment/#http-request","title":"HTTP Request","text":"<p><code>POST ../trade/v1/payment</code></p> <p>Listed below are the most common parameters for the payment endpoint. Please refer to the payment scenario applicable to you for additional parameters.</p>"},{"location":"integration/payment/#public-payment-request-parameters","title":"Public Payment Request Parameters","text":"Parameter name Parameter code Mandatory Type Description Payment amount <code>txamt</code> Yes Int(11) Amount of the transaction. Unit in cents (i.e. 100 = $1) Currency <code>txcurrcd</code> Yes String(3) Transaction currency. View the Currencies table for a complete list of available currencies Payment type <code>pay_type</code> Yes String(6) Please refer to the section Payment Codes for a complete list of payment types API Order Number <code>out_trade_no</code> Yes String(128) External transaction number / Merchant platform transaction number: This parameter must be unique for each payment and refund request under the same merchant account in the system. Request transaction time <code>txdtm</code> Yes String(20) Transaction time format\uff1a YYYY-MM-DD hh:mm:ss Authorization Code <code>auth_code</code> Yes (CPM only) String(128) Specifies the authorization code for scanning a barcode/QR Code. The <code>auth_code</code> returned is unique in each authorization. Each <code>auth_code</code> can be used only once and will automatically expire in one day. For testing CPM with Alipay and WeChat Pay the <code>auth_code</code> can be extracted with any QRC reader or manually found in the consumer wallet below the barcode. Order expiration time <code>expired_time</code> No (MPM only) String(3) QRC expiration time in unit minutes. The default expiration time is 30 minutes. The parameter can manually be adjusted to a minimum of 5 minutes, and up to a maximum of 120 minutes. Available for: 800201 - WeChat scan code800101 - Alipay scan code 801512 - Alipay Hong Kong WAP payment801501 - Alipay Hong Kong scan code801107 - Alipay overseas WAP payment801101 - Alipay overseas scan code801010 - WeChat Hong Kong APP801510 - Alipay Hong Kong APP Product name identification <code>goods_name</code> No String(64) Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. Cannot be empty for app payment. Parameter needs to be UTF-8 encoded if it is written in Chinese characters. QF Pay merchant number <code>mchid</code> No String(16) May or may not be given to merchant. If MCHID is given, it is mandatory to provide the MCHID .On the contrary, if MCHID is not provided, merchants shall not pass in the MCHID parameter in the API request. Time zone <code>txzone</code> No String(5) Transaction Time zone: Record of the transaction in local time, default time zone is Beijing time UTC+8 (+0800). Device ID <code>udid</code> No String(40) Unique transaction device ID. Is displayed on the merchant portal."},{"location":"integration/payment/#public-payment-response-parameters","title":"Public Payment Response Parameters","text":"Parameter name Parameter code Type Description Payment type <code>pay_type</code> String(6) Please refer to the section Payment Codes for a complete list of payment types System transaction time <code>sysdtm</code> String(20) Format\uff1aYYYY-MM-DD hh:mm:ss  This parameter value is used as the cut-off time for settlements. Request transaction time <code>txdtm</code> String(20) Format\uff1aYYYY-MM-DD hh:mm:ss Response message <code>resperr</code> String(128) Payment amount <code>txamt</code> Int(11) Other message information <code>respmsg</code> String(128) External transaction number <code>out_trade_no</code> String(128) External transaction number QFPay transaction number <code>syssn</code> String(40) Wallet/Channel transaction number <code>chnlsn</code> String Return code <code>respcd</code> String(4) 0000 = Request successful.  1143/1145 = merchants are required to continue to query the transaction result.  All other return codes indicate transaction failure. Please refer to the page Transaction Status Codes for a complete list of response codes. <p>The above command returns JSON structured like this:</p> <pre><code>{\n    \"txdtm\": \"2019-12-25 14:21:28\",\n    \"qrcode\": \"https://qr.alipay.com/bax01781r3pu4fjaqazt4091\",\n    \"pay_type\": \"800101\",\n    \"resperr\": \"success\",\n    \"out_trade_no\": \"01234567890123\",\n    \"syssn\": \"20191225000200020060996533\",\n    \"sysdtm\": \"2019-12-25 14:22:37\",\n    \"paydtm\": \"2019-12-25 14:22:37\",\n    \"txcurrcd\": \"EUR\",\n    \"respmsg\": \"\",\n    \"cardcd\": \"\",\n    \"udid\": \"qiantai2\",\n    \"txamt\": \"10\",\n    \"respcd\": \"0000\",\n    \"chnlsn\": \"\"\n}\n</code></pre>"},{"location":"integration/payment/#transaction-status-codes","title":"Transaction Status Codes","text":"Return code Description 0000 Transaction successful 1100 System under maintenance (1100) 1101 Reversal error (1101) 1102 Duplicate request (1102) 1103 Request format error (1103) 1104 Request parameter error (1104) 1105 Device not activated (1105) 1106 Invalid device (1106) 1107 Device not allowed (1107) 1108 Signature error (1108) 1125 Transaction has been refunded already (1125) 1136 The transaction does not exist or is not operational (1136) 1142 Order already closed (1142) 1143 The order has not been paid for, the password is currently being entered (1143) 1145 Please wait while processing (1145) 1147 Wechat pay transaction error (1147) 1150 Your billing method is T0 and does not support canceling transactions. (1150) 1155 Refund request denied (1155) 1181 Order expired (1181) 1201 Insufficient balance, please use a different payment method (1201) 1202 Incorrect or expired payment code, please show the correct payment code or refresh the payment code and retry (1202) 1203 Merchant account esrror, confirm that the payment account is configured correctly (1203) 1204 Bank error, confirm that the payment wallet is functionable (1204) 1205 The transaction failed. Please try again later (1205) 1212 Please use the UnionPay overseas payment code (1212) 1241 The store does not exist or the status is incorrect. Do not conduct payments (1241) 1242 The store has not been configured correctly, unable to conduct payments (1242) 1243 The store has been disabled. Do not conduct payments, contact the owner to confirm (1243) 1250 The transaction is forbidden. For more information please contact QFPay Customer Service Team (1250) 1251 The store has not been configured correctly, we are currently working to fix this problem (1251) 1252 System error when making the order request (1252) 1254 A problem occured. We are currently resolving the issue (1254) 1260 The order has already been paid for, please confirm the transaction result before conducting more transactions (1260) 1261 The order has not been paid for, please confirm the transaction result before conducting more transactions (1261) 1262 The order has been refunded, please confirm the order status before conducting more transactions (1262) 1263 The order has been cancelled, please confirm the order status before conducting more transactions (1263) 1264 The order has been closed, please confirm the order status before conducting more transactions (1264) 1265 The transaction cannot be refunded. Refunds for transactions between 11:30pm to 0:30am and special promotions cannot be processed. (1265) 1266 The transaction amount is wrong, please confirm the order status (1266) 1267 The order information does not match, please confirm the order status (1267) 1268 The order does not exist, please confirm the order status (1268) 1269 Today's unsettled transaction amount is insufficient. Refunds cannot be processed. Please confirm that the balance is sufficient (1269) 1270 This currency does not support partial refunds (1270) 1271 The selected transaction does not support partial refunds (1271) 1272 The refund amount is greater than the maximum amount that can be refunded for the original transaction (1272) 1294 The transaction may be non-compliant and has been prohibited by the bank (1294) 1295 The connection is slow, waiting for a network response (1295) 1296 The connection is slow, waiting for a network response. Please try again later or use other payment methods (1296) 1297 The banking system is busy. Please try again later or use other payment methods (1297) 1298 The connection is slow, waiting for a network response. In case you have already paid, do not repeat the payment. Please confirm the result later (1298) 2005 The customer payment code is incorrect or has expired, please refresh and restart the transaction process (2005) 2011 Transaction serial number repeats (2011)"},{"location":"pos/ecr/","title":"ECR integration technical specification","text":"<p>[!NOTE] <code>4.30.8</code>  - ECR integration is available</p> <p><code>4.31.1</code> - new API: transaction inquiry - new field: cardscheme - refund API support partial refund amount request - optimize connection performance - fix other known issues</p> <p><code>4.32.5</code> - ECR: optimize USB connection mechanism - ECR: no password input required in app when initialize refund request - ECR: allow control amount modification in refund request - ECR: can set to use front camera or back camera in trade request - ECR: support new parameter <code>out_trade_no</code> in order inquiry - ECR: optimize WIFI connection mechanism</p> <p><code>4.32.8</code> - ECR: support new parameter <code>wait_card_timeout</code> in payment request</p>"},{"location":"pos/ecr/#1-pos-key","title":"1. POS-KEY","text":"<p>POS-KEY is a secret key used to encrypt and decrypt the data. It is generated by Haojin App. </p> <p>The default POS-KEY is <code>f46b1f08bec1f39104792cc79ec9aacd</code>  The default encrpytion is ON. </p> <p>There is an option to switch on/off on merchant portal (MMS) or refresh POS-KEY. And, Haojin App refresh is required to be effective  Steps to refresh POS-KEY Login Haojin App -&gt; My -&gt; Settings -&gt; POS-Key -&gt; generate </p> <p>Steps to check POS-KEY Login Shop Management Platform-&gt; Settings -&gt; Devices Settings -&gt; POS Key Mgmt tab</p>"},{"location":"pos/ecr/#2-encryption","title":"2. Encryption","text":"<p>All data is encrypted by AES. The key is POS-KEY and the IV is <code>qfpay202306_hjsh</code></p> <p></p> <p>The data is encoded by Base64 after encryption.</p>"},{"location":"pos/ecr/#3-request-payload-format","title":"3. Request payload format","text":"Parameter name Mandatory Parameter type Description amt required Double Amount e.g. $10.1 =&gt; 10.1 func_type required String Instruction code channel required String Wallet name, refer to Channel list out_trade_no optional String Merchant reference.  if not passed, the out_trade_no won't be passed camera_id optional Integer can select using front camera or back camera in QR code payment CPM mode  0: back camera (default),  1: front camera wait_card_timeout optional Integer can set waiting time in credit card payment page, default 120 seconds ### 3.1 Payment <p>[!NOTE] For QR code payment, MPM/CPM mode is automatically selected base on last usage. </p> <p>Front camera or back camera can be selected  to use by parameter <code>camera_id</code> </p> <p>Time to wait for credit card payment in payment page can be set by parameter <code>wait_card_timeout</code> <pre><code>{\n    \"content\": {\"amt\": 100, \"camera_id\":0, \"channel\": \"card_payment\",\"func_type\": 1001, \"out_trade_no\": \"456799999999\",\n    \"wait_card_timeout\":120},\n    \"digest\":\"76b9186077cdc2bc5d78ae921309811d\"\n}\n</code></pre></p> <p>For inquiry the transaction result, please use the Inquire API: https://sdk.qfapi.com/?python#transaction-enquiry</p>"},{"location":"pos/ecr/#22-refund-void","title":"2.2 Refund / Void","text":"<p>no password input is required in app when initialize refund request</p> <p>specific parameters | Parameter name | Mandatory | Parameter type | Description | |---|---|---|---| |orderId|required|String|QFPay transaction Id | refund_amount | optional | String| the default refund amount is the refundable amount of the order, support partial refund | |allow_modify_flag|optional| Integer| 0: Not allow modification of refund amount (default value)  1: allow modification of refund amount</p> <p>[!NOTE] for Card payment, Unionpay Card and American Express Card,  the amount of same day refund must be <code>full amount</code> <pre><code>{\n     \"content\": {\"allow_modify_flag\":1, \"func_type\": 1002,\"orderId\": \"order_id\",\"refund_amount\": \"0.05\"},\n     \"digest\": \"9C8E9FB05C7C24B6CA04EBFA1263EF41\"\n}\n</code></pre></p>"},{"location":"pos/ecr/#33-print-receipt","title":"3.3 Print receipt","text":"<pre><code>{\n    \"content\": {\"orderId\": \"12345678\",\"func_type\": 3001},\n    \"digest\":\"79fd145311d54d03e4e685d50f15dd7f\"\n}\n</code></pre>"},{"location":"pos/ecr/#34-print-transaction-summary","title":"3.4 Print transaction summary","text":"<pre><code>{\n    \"content\": {\"func_type\": 3002},\n    \"digest\":\"79fd145311d54d03e4e685d50f15dd7f\"\n}\n</code></pre>"},{"location":"pos/ecr/#35-transaction-inquiry-by-order-id","title":"3.5 Transaction inquiry by order Id","text":"<p>new paramter <code>out_trade_no</code> is supported <pre><code>{\n     \"content\": {\"orderId\": \"1234567890\",\"func_type\": 4001},\n     \"digest\":\"99CE8BF9C7304AC964522D10F51660B4\"\n}\n</code></pre></p>"},{"location":"pos/ecr/#36-cancel-traderefund-request","title":"3.6 Cancel trade/refund request","text":"<pre><code>{\n    \"content\": {\"func_type\": 5001},\n    \"digest\": \"99CE8BF9C7304AC964522D10F51660B4\"\n}\n</code></pre> <p>content\uff1adata request payload digest: signature of data request payload (content), sort the parameters in alphabetical ascending order and concat them in key=value format, use md5 algorithm to get hash value which is signature</p>"},{"location":"pos/ecr/#generate-signature","title":"Generate signature","text":"<p>sample of generate signature</p> <pre><code>// original payload\ncontent={\"amt\":100,\"channel\": \"card_payment\",\"func_type\":1001,\"out_trade_no\":\"456799999999\"} \n\n// sorted keys in alphabetical ascending order\nformat_content={amt=100,channel='card_payment',func_type=1001,out_trade_no='456799999999'} \n\n// encryption\n// !! if the value is empty, pass '' (empty string) instead\ndigest=md5(format_content + pos_key)\ndigest=md5({amt=100,channel='card_payment',func_type=1001,out_trade_no='456799999999'}f46b1f08bec1f39104792cc79ec9aacd) \n</code></pre> <p>if encryption is enabled, the above payload will be encrypted by AES at <code>content</code>, and the <code>digest</code> will be calculated based on the encrypted payload.</p> <p>for example <pre><code>{\n    \"content\": \"{func_type: 3002}\",\n    \"digest\":\"79fd145311d54d03e4e685d50f15dd7f\"\n}\n</code></pre></p>"},{"location":"pos/ecr/#4-fields-explanation","title":"4. Fields explanation","text":"<pre><code>1\u3001 func_type : business type\n    (1) 1001 Trade\n    (2) 1002 Refund   \n    (3) 3001 Print receipt \n    (4) 3002 Print transaction summary\n    (5) 4001 Transaction inquiry\n    (6) 5001 Cancel trade/refund request\n\n2\u3001channel: payment method\n    (1) \u3001card_payment  Card payment\n    (2) \u3001wx            WeChat Pay\n    (3) \u3001alipay        Alipay\n    (4) \u3001payme         PayMe\n    (5) \u3001union         UnionPay\n    (6) \u3001fps           FPS\n    (7) \u3001octopus       Octopus\n    (8) \u3001unionpay_card Unionpay Card\n    (9) `amex_card`     American Express Card\n\n3\u3001amt: Transaction amount\n\n4\u3001orderId: Transaction reference number, the same as out_trade_no\n</code></pre>"},{"location":"pos/ecr/#5-response-format","title":"5. Response format","text":"<pre><code>{\\\"respcd\\\": \\\"6000\\\",\\\"data\\\": \\\"{\"aaaaaa\"}\\\",\\\"respmsg\\\": \\\"xxxxxxxxxx\\\",\\\"resperr\\\":\\\"xxxxxxxxxx\\\"}\n</code></pre> <pre><code>1\u3001respcd: response code\n    \uff081\uff09\u3001\"4003\"\uff0cPOS-KEY is invalid\n    \uff082\uff09\u3001\"5001\"\uff0cDecryption failed\n    \uff083\uff09\u3001\"4004\"\uff0cRequest method is incorrect, may use POST request\n    \uff084\uff09\u3001\"4005\"\uff0cOther errors\n    \uff085\uff09\u3001\"4006\"  Incorrect parameter(s)\n    \uff086\uff09\u3001\"5001\"\uff0cDecryption failed\n    \uff087\uff09\u3001\"6000\"  request succeed     \n    \uff088\uff09\u3001\"6001\"  request cancel\n    \uff089\uff09\u3001\"6002\"  request error\n\n2\u3001respmsg\uff1aResponse message\n3\u3001resperr\uff1aError message\n4\u3001data:response data from trade or refund request\n    (1) data fields in trade response\uff1a    \n          respcd;response code\n          resmsg;response message\n          reserr;response error message\n          mchntnm;merchant name\n          sysdtm;system time\n          userid;store Id\n          busicd;business code\n          txamt;transaction amount\n          txcurrcd;transaction currency\n          chnlsn;channel serial number\n          paydtm;payment time\n          udid;user id\n          syssn;system serial number\n          clisn;client serial number\n          out_trade_no\uff1bmerchant order Id\n          cardscheme;card scheme, e.g. VISA\n    (2) data field in refund response\uff1a\n         respcd;response code\n         resmsg;response message\n         reserr;response error message\n         sysdtm;system time\n         paydtm;payment time\n         txcurrcd;transaction currency\n         txdtm;trsnaction time\n         orig_syssn;original system serial number\n         out_trade_no;merchant order Id\n         syssn;system serial number\n         chnlsn;channel serial number\n         txamt;transaction amount\n         originTxamt;original transaction amount\n    (3) data field in transaction inquiry response:\n         server_time;server time\n         cancel;cancel status\n         clisn;client serial number\n         opuid;operator id\n         prepay_amt;payment amount\n         syssn;QF system serial number\n         tradetp;payment type\n         sysdtm;QF system time\n         txcurrcd;transaction currency\n         origssn;original system serial number\n         customer_source;customer source\n         opuser;operator\n         nickname;user name\n         allow_refund_amt;refundable amount\n         desc;description\n         txamt;transaction amount\n         busicd;business code\n         respcd;response code\n         origbusicd;original business code\n         chnlsn;channel serial number\n         cardscheme;card scheme, e.g. VISA\n</code></pre>"},{"location":"pos/ecr/#6-usb-data-transmission-method","title":"6. USB data transmission method","text":"<ol> <li>Connect the POS to the cash register via USB cable.</li> <li>follow the USB communication protocol to construct the data. See the ninth article for details: \"Cash register &amp; Pos communication protocol\".</li> <li>Data response. The received data needs to be parsed according to the communication protocol, and then the data message is obtained, and then decrypted by AES.</li> </ol>"},{"location":"pos/ecr/#7-http-protocol","title":"7. HTTP protocol","text":"<ol> <li>HTTP data transmission method requires POS host IP address and port. The default port of the HTTP method is 9001.</li> <li>Data message format:      (1) Encrypt the data message through AES      (2) Initiate the request through the HTTP Post request</li> <li>Request API      (1) Trade: /api/pos/trade      (2) Refund: /api/pos/cancel      (3) Print receipt: /api/pos/print_receipt      (4) Print transaction summary: /api/pos/transaction_info      (5) Transaciton inquiry: /api/pos/query_transaction      (6) Cancel trade/refund request: /api/pos/cancel_request</li> <li>The request header needs to be set. The request Content-type format is: application/json</li> <li>The request result needs to be decrypted by AES to obtain the response message data</li> </ol>"},{"location":"pos/ecr/#8-tcp-protocol","title":"8. TCP protocol","text":"<ol> <li>The HTTP data transmission method requires POS host and port. The default port of the HTTP method is 9002.</li> <li>Cash register connects to POS through socket connection</li> <li>Data is transmitted through socket. The data format is the encrypted data of the data message after AES encryption.</li> <li>The result of the request needs to be decrypted by AES to obtain the response message data</li> </ol>"},{"location":"pos/ecr/#9-cash-register-pos-communication-protocol-usb","title":"9. Cash register &amp; Pos communication protocol (USB)","text":""},{"location":"pos/ecr/#91-use-scenario","title":"9.1 Use scenario","text":"<p>The cash register and the smart POS device communicate through the serial port or Bluetooth to realize the cash register through the Haojin merchant App on the smart POS to collect and cancel the transaction.</p>"},{"location":"pos/ecr/#92-communication-method","title":"9.2 Communication method","text":"<p>Serial port.</p> <p>Through the Micro USB interface on the smart POS device or by borrowing the base to convert to USB Host mode, connect to the cash register via USB to serial cable.</p> <p>USB is more stable than Wifi, secure, and easy to deploy.</p>"},{"location":"pos/ecr/#93-payload-format","title":"9.3 Payload format","text":"Field name content Description Length Start indicator 0x2f6e start of payload 2 Bytes version 0x01 version (static) 1 Byte payload type 0x100x200x30 request  response  response error 1 Byte response reference number 0x01 ~ 0x7f used for request/response, payload splitting / concatenation  incremental for each, in loop 1 Byte payload length total bytes from <code>Start indicator</code> to <code>End indicator</code> 2 Bytes payload length (data segment) total bytes of data segment 2 Bytes data segment data segment, utf-8 encoding non static End indicator 0x2f6e indicate end of the payload 2 Bytes"},{"location":"pos/ecr/#94-detail-explanation","title":"9.4 detail explanation","text":""},{"location":"pos/ecr/#start-indicator-and-end-indicator","title":"Start indicator and end indicator","text":"<p>In order to avoid the situation that a data packet is split into multiple data blocks due to hardware reasons during communication, resulting in the inability to obtain the contents of the packet normally. The sender adds the start and end characters (0x2f6e) to each packet when sending the packet.</p> <p>After the receiver receives the packet, it will check whether the first two bytes of the packet are the start character (0x2f6e). If not, an error packet (0x31) will be responded. Otherwise, continue to traverse the subsequent bytes until the end character.</p> <p>[!IMPORTANT] 0x2f6e is the hexadecimal representation of <code>/n</code> (string, NOT the carriage return) in ASCII encoding</p>"},{"location":"pos/ecr/#payload-error-type","title":"Payload error type","text":"error type description 0x30 unknown 0x31 format error 0x32 validation error 0x33 data segment decrypt error 0x34 data segment format error 0x35 data segment packets error"},{"location":"pos/ecr/#request-and-response","title":"request and response","text":"<p>When the receiver receives the request packet (packet type is 0x10), it needs to send a response packet to inform the sender of the result of receiving the packet. If the validation is successful, the response packet type is 0x20. If the validation fails, the response packet type is 0x32. The response packet number is the same as the request packet number.</p>"},{"location":"pos/ecr/#response-timeout","title":"response timeout","text":"<p>Response timeout is 1000ms, if timeout, the request is considered failed, and the device is disconnected.</p>"},{"location":"pos/ecr/#payload-length","title":"payload length","text":"<pre><code>1. total length of the payload, from start indicator to end indicator\n2. payload length of data segment\n3. since the payload length is 2 bytes, the maximum length of the data segment is 65536 bytes\n4. it is recommended to keep the data segment length within 1024 bytes, if the data segment is too long, it should be split into multiple packets\n</code></pre>"},{"location":"pos/ecr/#data-pack-splitting-and-concatenation","title":"Data pack splitting and concatenation","text":"<p>When sender splits the data segment into multiple packets, the packet number is the same, and the packet length is the total length of the data segment. The receiver needs to wait for the subsequent packets with the same packet number until the packet length is equal to the total length of the data segment, and then send the response packet.</p> <p>The receiver waits for the timeout of multiple packets to be 500ms. After the timeout, the previously received packets are discarded. If subsequent packets with the same number are received, an error (0x35) response packet is sent.</p>"},{"location":"pos/ecr/#data-encryption","title":"Data encryption","text":"<p>The sender and receiver need to encrypt the valid data using the AES algorithm. The key is allocated by the service provider.</p> <p>Key length 16 bytes 128 bits</p> <p>Key offset * Algorithm mode CBC (Cipher Block Chaining) encryption block chain Padding method PKCS5Padding</p>"},{"location":"pos/ecr/#serial-port-settings","title":"Serial port settings","text":"<p>Baud rate: 9600 Stop bit: 1 Parity bit: 0 Data bit: 8 Flow control: off</p>"},{"location":"pos/ecr/#usb-to-serial-port-line-chip-type-supported","title":"USB to serial port line chip type supported","text":"<p>PL2303 HXD supported CH340 not supported FT232 not supported</p> <p>The above chip types are the most common USB to serial port chips on the market. The stability and price of the three chips are the same, FT232&gt;CH340&gt;PL2303</p>"},{"location":"pos/ecr/#sample-data","title":"Sample data","text":"<p>Sample data is as follows: <pre><code>{\\\"content\\\":\\\"{\\\\\\\"amt\\\\\\\":100,\\\\\\\"channel\\\\\\\":\\\\\\\"wx\\\\\\\",\\\\\\\"funcType\\\\\\\":1,\\\\\\\"mode\\\\\\\":1}\\\",\\\"digest\\\":\\\"2f0c4683e25a7b9407265033070e9034\\\"}\n</code></pre> complete data request content(Hexadecimal format): <pre><code>2f6e011001007f00747b22636f6e74656e74223a227b5c22616d745c223a3130302c5c226368616e6e656c5c223a5c2277785c222c5c2266756e63547970655c223a312c5c226d6f64655c223a317d222c22646967657374223a223266306334363833653235613762393430373236353033333037306539303334227d2f6e\n</code></pre></p>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/","title":"Online Pre-authorisation Payment APIs","text":"<ul> <li>General APIs</li> <li>Create Pre-Authorisation Payment (freeze funds)</li> <li>Complete payment for pre-authorised transactions (deduct funds)</li> <li>Cancel payment for pre-authorised transactions</li> </ul>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/#general-apis","title":"General APIs","text":"<p>Instructions on general integration with the development environment is available on https://sdk.qfapi.com/#introduction</p> <p>For instance you may find the following useful before you start the integration:</p> <ul> <li>API credentials to be used</li> <li>testing environments</li> <li>signature generation for api requests</li> <li>Common error codes</li> </ul> <p>You can also find general APIs that are also applicable to pre-authorisation payments: </p> <ul> <li>Transaction Enquiry (https://sdk.qfapi.com/?python#transaction-enquiry)</li> <li>Transaction Refunds (https://sdk.qfapi.com/?python#refunds)</li> </ul>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/#creating-and-capturing-payments","title":"Creating and capturing payments","text":""},{"location":"pre-authorisation/Online%20Pre-Authorisation/#step-1-create-pre-authorisation-payment","title":"Step 1: Create Pre-Authorisation Payment","text":"<p>The Pre-authorisation Step has to be achieved using the Payment Element component. For details of the integration, please refer to the respective sessions in the payment element documentation.</p>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/#step-2-capture-payment-for-pre-authorised-transactions","title":"Step 2: Capture payment for pre-authorised transactions","text":"<p>Capture the amount booked by the customer in pre-authorised transactions</p> <p>url :   /trade/v1/authtrade</p> <p>method : POST</p> <p>header:</p> Header name Must Description X-QF-APPCODE Y app code X-QF-SIGN Y app key <p>parameters : </p> Field Must Description txamt Y transaction amount txcurrcd N transaction currency mchid N mchid, merchant id syssn Y original transaction ID from pre-authorised payment <p>response :</p> <pre><code>{\n     \"sysdtm\": \"2024-02-26 15:04:12\",\n     \"paydtm\": \"2024-02-26 15:04:12\",\n     \"udid\": \"qiantai2\",\n     \"txcurrcd\": \"HKD\",\n     \"txdtm\": \"2024-02-26 07:04:11\",\n     \"txamt\": \"500\",\n     \"resperr\": \"\u4ea4\u6613\u6210\u529f\",\n     \"respmsg\": \"Capture received\",\n     \"out_trade_no\": \"\",\n     \"syssn\": \"20240226180500020000014116\",\n     \"orig_syssn\": \"20240226180500020000014079\",\n     \"respcd\": \"0000\",\n     \"chnlsn\": \"\",\n     \"cardcd\": \"\"\n}\n</code></pre>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/#unfreeze-amount-for-pre-authorised-transactions","title":"Unfreeze amount for <code>PRE-AUTHORISED</code> transactions","text":"<p>Only the non-captured (<code>pre-authorised amount - captured amount</code>) amount in the transaction can be unfreezed (released back to the customer). This action can only be done ONCE.</p> <p>url :   /trade/v1/unfreeze</p> <p>method : POST</p> <p>header:</p> Header name Must Description X-QF-APPCODE Y app code X-QF-SIGN Y app key <p>parameters : </p> Field Must Description txamt Y transaction amount txdtm Y transaction time syssn Y original transaction ID out_trade_no Y original merchant order id mchid N mchid, merchant id <p>response : <pre><code>{\n     \"sysdtm\": \"2024-02-26 17:17:05\",\n     \"paydtm\": \"2024-02-26 17:17:06\",\n     \"udid\": \"qiantai2\",\n     \"txcurrcd\": \"HKD\",\n     \"txdtm\": \"2024-02-26 09:17:05\",\n     \"txamt\": \"2000\",\n     \"resperr\": \"\u4ea4\u6613\u6210\u529f\",\n     \"respmsg\": \"Void received\",\n     \"out_trade_no\": \"\",\n     \"syssn\": \"20240226180500020000014222\",\n     \"orig_syssn\": \"20240226180500020000014220\",\n     \"respcd\": \"0000\",\n     \"chnlsn\": \"\",\n     \"cardcd\": \"\"\n}\n</code></pre></p>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/#refunding-completed-captured-transactions","title":"Refunding Completed (<code>CAPTURED</code>) Transactions","text":"<p>For integration, please refer to the \"General API\" section of the documentation. Please note that the syssn used in the refund transaction should correspond to the syssn returned upon the /authtrade request.</p>"},{"location":"pre-authorisation/Online%20Pre-Authorisation/#notifications","title":"Notifications","text":"<p>General notification rule applies. For details, please refer to the Asynchronous Notifications section in the documentations (https://sdk.qfapi.com/?python#asynchronous-notifications)</p> <p>Upon successful execution of the following actions, you should be able to receive a notification</p> <ul> <li>payment completion (captured)</li> <li>unfreeze funds</li> <li>refund</li> </ul> <p>These notifications will follow the same format as below. For different notification, the value of the field <code>notify_type</code> will differ</p> Action Completed notify_type value Payment Captured payment Unfreeze funds unfreeze Refund refund <pre><code>{\n  \"status\": \"1\",\n  \"pay_type\": \"800101\",\n  \"sysdtm\": \"2020-05-14 12:32:56\",\n  \"paydtm\": \"2020-05-14 12:33:56\",\n  \"goods_name\": \"\",\n  \"txcurrcd\": \"HKD\",\n  \"txdtm\": \"2020-05-14 12:32:56\",\n  \"mchid\": \"\",\n  \"txamt\": \"10\",\n  \"exchange_rate\": \"\",\n  \"chnlsn2\": \"\",\n  \"out_trade_no\": \"YEPE7WTW46NVU30JW5N90H7DHD94N56B\",\n  \"syssn\": \"20200514000300020093755455\",\n  \"cash_fee_type\": \"\",\n  \"cancel\": \"0\",\n  \"respcd\": \"0000\",\n  \"goods_info\": \"\",\n  \"cash_fee\": \"0\",\n  \"notify_type\": \"payment\",\n  \"chnlsn\": \"\",\n  \"cardcd\": \"\"\n}\n</code></pre>"},{"location":"subscription/integration/","title":"QFPay Subscription API","text":"<p><sub><sup>last modified 20230816<sup><sub> <p>Create and manage subscriptions and recurring payment</p>"},{"location":"subscription/integration/#how-subscription-works","title":"How subscription works","text":""},{"location":"subscription/integration/#api-environment","title":"API Environment","text":"Environment Name URL Sandbox https://openapi-int.qfapi.com"},{"location":"subscription/integration/#api-resources","title":"API Resources","text":"<p>For build and manage subscriptions, the following API resources are required:</p> API Resources Customer Payment Token Product Subscription"},{"location":"subscription/integration/#create-subscription-steps","title":"Create subscription steps","text":""},{"location":"subscription/integration/#subscription-state","title":"Subscription state","text":"<p>state diagram All subscription state will be pushed to merchant's backend service once triggered</p>"},{"location":"subscription/integration/#standard-api-response-parameter","title":"Standard API response parameter","text":"Parameter Name Data Type Description respcd String Return code, 0000 = API call succeeded resperr String result description respmsg String information description page Int page no.,present in inquiry API page_size Int page size,presented in inquiry API data Object result, JSON object or list of JSON object"},{"location":"subscription/integration/#customer","title":"Customer","text":"<p>Customer is an API resource for merchant to store customer's information. This object can be used in PaymentToken, Subscription APIs</p>"},{"location":"subscription/integration/#create-customer-object","title":"Create customer object","text":"<pre><code>API path: /customer/v1/create\n</code></pre> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description name String No customer name phone String No customer contact no. email String No customer email address billing_address String No customer billing address, stringify JSON object <p>Response parameters in data field:</p> Parameter Name Data Type Description customer_id String unqiue customer ID in QF system name String customer name phone String customer contact no. email String customer email address billing_address JSON customer billing address"},{"location":"subscription/integration/#update-customer-object","title":"Update customer object","text":"<p><pre><code>API path: /customer/v1/update\n</code></pre> Request parameters:</p> Parameter Name Data Type Mandatory Description customer_id String Yes unqiue customer ID in QF system name String No customer name phone String No customer contact no. email String No customer email address billing_address JSON No customer billing address <p>Response parameters in data field:</p> Parameter Name Data Type Description customer_id String unqiue customer ID in QF system name String customer name phone String customer contact no. email String customer email address billing_address JSON customer billing address"},{"location":"subscription/integration/#inquiry-customer-object","title":"Inquiry customer object","text":"<pre><code>API path: /customer/v1/query\n</code></pre> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description customer_id String No unqiue customer Id in QF system name String No customer name phone String No customer contact no. email String No customer email address page Int No default value = 1 page_size Int No default value = 10, the max value is 100 <p>Response parameters in data field:</p> Parameter Name Data Type Description customer_id String unqiue customer ID in QF system name String customer name phone String customer contact no. email String customer email address"},{"location":"subscription/integration/#delete-customer-object","title":"Delete customer object","text":"<p>permanently delete customer object, cannot be undo. Any subscription plan associated with the deleted customer will be cancelled. <pre><code>API path: /customer/v1/delete\n</code></pre></p> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description customer_id String Yes unique customer identifier in QF system"},{"location":"subscription/integration/#product","title":"Product","text":"<p>Products are the model for goods or services that merchants will provide to the customers. It defines transaction amount, transaction currency and billing cycles(if applicable). This object will be used in subscription API.</p>"},{"location":"subscription/integration/#create-product-object","title":"Create product object","text":"<p>create a new product <pre><code>API path: /product/v1/create\n</code></pre></p> Parameter Name Data Type Mandatory Description name String Yes product name that displays to the customer type String No default value=onetime, possible values: onetime, recurring description String No product descritpion txamt Int Yes transaction amount, e.g. $1=100 txcurrcd String Yes transaction currency, e.g. HKD interval String No possible values: monthly, yearly, mandatory for recurring product interval_count Int No interval between 2 charges, maximum 1 year allowed, mandatory for recurring product usage_type String No default value=licensed, possible values: licensed <p>Response parameters in data field:</p> Parameter Name Data Type Description product_id String unique identifer generated in QF system name String product name that displays to the customer type String default value=onetime, possible values: onetime, recurring description String product descritpion txamt Int transaction amount, e.g. $1=100 txcurrcd String transaction currency, e.g. HKD interval String possible values: monthly, yearly interval_count Int interval between 2 charges usage_type String default value=licensed, possible values: licensed"},{"location":"subscription/integration/#update-product-object","title":"Update product object","text":"<p>update current product information <pre><code>API path: /product/v1/update\n</code></pre></p> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description product_id String Yes unique identifier generated in QF system name String No product name that displays to the customer description String No product descritpion <p>Response parameters in data field:</p> Parameter Name Data Type Description product_id String unique product identifer generated in QF system name String product name that displays to the customer type String default value=onetime, possible values: onetime, recurring description String product descritpion txamt Int transaction amount, e.g. $1=100 txcurrcd String transaction currency, e.g. HKD interval String possible values: monthly, yearly interval_count Int interval between 2 charges usage_type String default value=licensed, possible values: licensed"},{"location":"subscription/integration/#inquiry-product-object","title":"Inquiry product object","text":"<pre><code>API path: /product/v1/create\n</code></pre> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description product_id String No unique product identifier generated in QF system name String No product name that displays to the customer description String No product descritpion txcurrcd String No transaction currency interval String No possible values: monthly,yearly page Int No page no., default value=1 page_size Int No page size, default value=10,max value=100 <p>Response parameters in data field:</p> product_id String unique identifer generated in QF system name String product name that displays to the customer type String possible values: onetime, recurring description String product descritpion txamt Int transaction amount, e.g. $1=100 txcurrcd String transaction currency, e.g. HKD interval String possible values: monthly, yearly interval_count Int interval between 2 charges usage_type String possible values: licensed"},{"location":"subscription/integration/#delete-product-object","title":"Delete product object","text":"<pre><code>only can delete product that is not assoicated with any subscription object\n</code></pre> <p>API path: /product/v1/delete</p> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description product_id String No unique product identifier generated in QF system"},{"location":"subscription/integration/#subscription","title":"Subscription","text":"<p>QFPay automatically charges the customers on every billing cycle based on the product with the provided Payment Token until the subscription is finished or cancelled. Before create subscription, payment token, customer and product must be created.</p>"},{"location":"subscription/integration/#create-subscription-object","title":"Create subscription object","text":"<pre><code>API path: /subscription/v1/create\n</code></pre> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description customer_id String Yes unique customer identifier in QF system token_id String Yes unique payment token identifier in QF system products Object Yes list of unique product identifier in QF system and quantity total_billing_cycles Int No the total billing cycles of the subscirption, infinity if null value start_time String No the time subscription will start to work, the first payment will be <p>parameters in products:</p> Parameter Name Data Type Mandatory Description product_id String Yes unique production identifier in QF system quantity Int No default value=1 <p>Response parameters in data field:</p> Parameter Name Data Type Description customer_id String unique customer identifier in QF system token_id String unique payment token identifier in QF system products Object list of unique product identifier in QF system and quantity total_billing_cycles Int the total billing cycles of the subscirption, infinity cycles if null value start_time String No"},{"location":"subscription/integration/#update-subscription-object","title":"Update subscription object","text":"<p>update current subscription <pre><code>API path: /subscription/v1/update\n</code></pre></p> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description subscription_id String Yes unique subscription identifier in QF system total_billing_cycles Int No the total billing cycles of the subscirption, infinity if null value start_time String No the time that subscription will start to work, it will be the first subscription payment time token_id String No unique payment token identifier in QF system products Object No list of unique product identifier in QF system and quantity <p>Response parameters in data field:</p> Parameter Name Data Type Description subscription_id String unique subscription identifier in QF system customer_id String unique customer identifier in QF system token_id String unique payment token identifier in QF system products Object list of unique product identifier in QF system and quantity total_billing_cycles Int the total billing cycles of the subscirption, infinity cycles if null value start_time String the time that subscription will start to work, it will be the first subscription payment time state String subscription state"},{"location":"subscription/integration/#inquiry-subscription-object","title":"Inquiry subscription object","text":"<pre><code>API path: /subscription/v1/query\n</code></pre> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description page Int No page no.,default value=1 page_size Int No page size, default value=10, max value=100 subscritpion_id String No unique subscription identifier in QF system customer_id String No unique customer identifier in QF system token_id String No unique payment otken identifier in QF system state String No subscription state, e.g. incompelete, active,... <p>Response parameters in data field:</p> Parameter Name Data Type Description subscription_id String unique subscription identifier in QF system customer_id String unique customer identifier in QF system token_id String unique payment token identifier in QF system products Object list of unique product identifier in QF system and quantity total_billing_cycles Int the total billing cycles of the subscirption, infinity cycles if null value state String subscription state next_billing_time String next fund deduct time last_billing_time String previous fund deduct time completed_billing_iteration Int how many billing cycles completed start_time String the time that subscription will start to work, it will be the first subscription payment time"},{"location":"subscription/integration/#cancel-subscription-object","title":"Cancel subscription object","text":"<p>cancel customer's subscription immediately <pre><code>API path: /subscription/v1/cancel\n</code></pre></p> <p>Request parameters:</p> Parameter Name Data Type Mandatory Description subscription_id String Yes unique ID of subscription object"}]}